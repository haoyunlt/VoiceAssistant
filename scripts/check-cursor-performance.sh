#!/bin/bash
# Cursor ÊÄßËÉΩ‰ºòÂåñÈ™åËØÅËÑöÊú¨

set -e

echo "üîç Cursor ÊÄßËÉΩ‰ºòÂåñÈ™åËØÅ"
echo "================================"
echo ""

# È¢úËâ≤ÂÆö‰πâ
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Ëé∑ÂèñÈ°πÁõÆÊ†πÁõÆÂΩï
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
cd "$PROJECT_ROOT"

echo "üìÅ È°πÁõÆË∑ØÂæÑ: $PROJECT_ROOT"
echo ""

# 1. Ê£ÄÊü• .cursorignore Êñá‰ª∂
echo "1Ô∏è‚É£  Ê£ÄÊü• .cursorignore ÈÖçÁΩÆ"
echo "--------------------------------"
if [ -f ".cursorignore" ]; then
    IGNORE_LINES=$(grep -v '^#' .cursorignore | grep -v '^$' | wc -l | tr -d ' ')
    echo -e "${GREEN}‚úì${NC} .cursorignore Â≠òÂú® (${IGNORE_LINES} Êù°ËßÑÂàô)"
else
    echo -e "${RED}‚úó${NC} .cursorignore ‰∏çÂ≠òÂú®"
fi
echo ""

# 2. ÁªüËÆ°Êñá‰ª∂ÊÄªÊï∞
echo "2Ô∏è‚É£  ÁªüËÆ°È°πÁõÆÊñá‰ª∂"
echo "--------------------------------"

# ÁªüËÆ°ÊâÄÊúâÊñá‰ª∂ÔºàÂåÖÊã¨Ë¢´ÂøΩÁï•ÁöÑÔºâ
TOTAL_FILES=$(find . -type f \
    -not -path "*/.git/*" \
    2>/dev/null | wc -l | tr -d ' ')
echo "   ÊÄªÊñá‰ª∂Êï∞: ${TOTAL_FILES}"

# ÁªüËÆ°Â∫îËØ•Ë¢´Á¥¢ÂºïÁöÑÊñá‰ª∂ÔºàÊéíÈô§ .gitignore Âíå .cursorignoreÔºâ
INDEXED_FILES=$(find . -type f \
    -not -path "*/.git/*" \
    -not -path "*/node_modules/*" \
    -not -path "*/.venv/*" \
    -not -path "*/venv/*" \
    -not -path "*/__pycache__/*" \
    -not -path "*/vendor/*" \
    -not -path "*/.next/*" \
    -not -path "*/dist/*" \
    -not -path "*/build/*" \
    -not -name "*.log" \
    -not -name "SPRINT*.md" \
    -not -name "*_PLAN.md" \
    -not -name "*_SUMMARY.md" \
    -not -name "*_REPORT.md" \
    -not -name "VOICEHELPER_MIGRATION_*.md" \
    2>/dev/null | wc -l | tr -d ' ')

REDUCTION_RATE=$(echo "scale=1; ($TOTAL_FILES - $INDEXED_FILES) * 100 / $TOTAL_FILES" | bc)

echo "   Â∫îÁ¥¢ÂºïÊñá‰ª∂: ${INDEXED_FILES}"
echo -e "   ${GREEN}ÂáèÂ∞ëÁ¥¢Âºï: ${REDUCTION_RATE}%${NC}"
echo ""

# 3. Ê£ÄÊü•Â§ßÂûãÊñáÊ°£
echo "3Ô∏è‚É£  Ê£ÄÊü•Â§ßÂûãÊñáÊ°£ÔºàË¢´ÂøΩÁï•Ôºâ"
echo "--------------------------------"

LARGE_DOCS=$(find . -maxdepth 1 -type f \
    \( -name "SPRINT*.md" \
    -or -name "*_PLAN.md" \
    -or -name "*_SUMMARY.md" \
    -or -name "*_REPORT.md" \
    -or -name "VOICEHELPER_MIGRATION_*.md" \) \
    2>/dev/null | wc -l | tr -d ' ')

if [ "$LARGE_DOCS" -gt 0 ]; then
    echo -e "${GREEN}‚úì${NC} ÊâæÂà∞ ${LARGE_DOCS} ‰∏™Â§ßÂûãÊñáÊ°£ÔºàÂ∑≤Ë¢´ÂøΩÁï•Ôºâ"
    find . -maxdepth 1 -type f \
        \( -name "SPRINT*.md" \
        -or -name "*_PLAN.md" \
        -or -name "*_SUMMARY.md" \
        -or -name "*_REPORT.md" \
        -or -name "VOICEHELPER_MIGRATION_*.md" \) \
        -exec basename {} \; 2>/dev/null | head -5 | sed 's/^/      - /'
    if [ "$LARGE_DOCS" -gt 5 ]; then
        echo "      ..."
    fi
else
    echo -e "${YELLOW}!${NC} Êú™ÊâæÂà∞ÈúÄË¶ÅÂøΩÁï•ÁöÑÂ§ßÂûãÊñáÊ°£"
fi
echo ""

# 4. Ê£ÄÊü•Êï∞ÊçÆÁõÆÂΩï
echo "4Ô∏è‚É£  Ê£ÄÊü•Êï∞ÊçÆÁõÆÂΩïÔºàÂ∫îË¢´ÂøΩÁï•Ôºâ"
echo "--------------------------------"

DATA_DIRS=("node_modules" ".venv" "venv" "__pycache__" "vendor" ".next" "dist" "build" \
           "milvus_data" "qdrant_data" "kafka_data" "clickhouse_data" "redis_data")

FOUND_DATA_DIRS=0
for dir in "${DATA_DIRS[@]}"; do
    if find . -type d -name "$dir" 2>/dev/null | grep -q .; then
        FOUND_DATA_DIRS=$((FOUND_DATA_DIRS + 1))
    fi
done

if [ $FOUND_DATA_DIRS -gt 0 ]; then
    echo -e "${GREEN}‚úì${NC} ÊâæÂà∞ ${FOUND_DATA_DIRS} ‰∏™Êï∞ÊçÆÁõÆÂΩïÔºàÂ∑≤Ë¢´ÂøΩÁï•Ôºâ"
    for dir in "${DATA_DIRS[@]}"; do
        if find . -type d -name "$dir" 2>/dev/null | grep -q .; then
            echo "      - $dir"
        fi
    done | head -5
else
    echo -e "${GREEN}‚úì${NC} Êú™ÊâæÂà∞ÈúÄË¶ÅÂøΩÁï•ÁöÑÊï∞ÊçÆÁõÆÂΩïÔºàÂæàÂ•ΩÔºÅÔºâ"
fi
echo ""

# 5. ÊåâÁ±ªÂûãÁªüËÆ°Êñá‰ª∂
echo "5Ô∏è‚É£  Êñá‰ª∂Á±ªÂûãÂàÜÂ∏ÉÔºàÂ∫îÁ¥¢ÂºïÁöÑÔºâ"
echo "--------------------------------"

echo "   Ê∫ê‰ª£Á†ÅÊñá‰ª∂:"
for ext in py go ts tsx js jsx; do
    COUNT=$(find . -type f -name "*.$ext" \
        -not -path "*/.git/*" \
        -not -path "*/node_modules/*" \
        -not -path "*/.venv/*" \
        -not -path "*/venv/*" \
        -not -path "*/__pycache__/*" \
        -not -path "*/vendor/*" \
        2>/dev/null | wc -l | tr -d ' ')
    if [ "$COUNT" -gt 0 ]; then
        printf "      %-6s: %4d files\n" "$ext" "$COUNT"
    fi
done

echo ""
echo "   ÈÖçÁΩÆÊñá‰ª∂:"
for ext in yaml yml json toml; do
    COUNT=$(find . -type f -name "*.$ext" \
        -not -path "*/.git/*" \
        -not -path "*/node_modules/*" \
        -not -path "*/.venv/*" \
        -not -path "*/vendor/*" \
        2>/dev/null | wc -l | tr -d ' ')
    if [ "$COUNT" -gt 0 ]; then
        printf "      %-6s: %4d files\n" "$ext" "$COUNT"
    fi
done
echo ""

# 6. ÂÜÖÂ≠òÊ£ÄÊü•
echo "6Ô∏è‚É£  Cursor ËøõÁ®ãÊ£ÄÊü•"
echo "--------------------------------"

if pgrep -f "Cursor" > /dev/null; then
    echo -e "${GREEN}‚úì${NC} Cursor Ê≠£Âú®ËøêË°å"

    # macOS ÁâπÂÆö
    if [[ "$OSTYPE" == "darwin"* ]]; then
        CURSOR_MEM=$(ps aux | grep -i "[C]ursor" | awk '{sum+=$6} END {printf "%.1f", sum/1024}')
        echo "   ÂÜÖÂ≠ò‰ΩøÁî®: ${CURSOR_MEM} MB"
    else
        echo "   (ÂÜÖÂ≠òÊ£ÄÊü•‰ªÖÊîØÊåÅ macOS)"
    fi
else
    echo -e "${YELLOW}!${NC} Cursor Êú™ËøêË°å"
fi
echo ""

# 7. ‰ºòÂåñÂª∫ËÆÆ
echo "7Ô∏è‚É£  ‰ºòÂåñÂª∫ËÆÆ"
echo "--------------------------------"

# Ê£ÄÊü•ÊòØÂê¶Êúâ .git ÁõÆÂΩïËøáÂ§ß
GIT_SIZE=$(du -sh .git 2>/dev/null | cut -f1)
echo "   .git ÁõÆÂΩïÂ§ßÂ∞è: $GIT_SIZE"

# Ê£ÄÊü•ÊòØÂê¶ÊúâÂ§ßÊñá‰ª∂
LARGE_FILES=$(find . -type f -size +10M \
    -not -path "*/.git/*" \
    2>/dev/null | wc -l | tr -d ' ')

if [ "$LARGE_FILES" -gt 0 ]; then
    echo -e "   ${YELLOW}!${NC} ÂèëÁé∞ ${LARGE_FILES} ‰∏™Â§ßÊñá‰ª∂ (>10MB)"
    echo "     ËøêË°å‰ª•‰∏ãÂëΩ‰ª§Êü•Áúã:"
    echo "     find . -type f -size +10M -not -path '*/.git/*' -exec ls -lh {} +"
fi
echo ""

# 8. ‰∏ã‰∏ÄÊ≠•Êìç‰Ωú
echo "8Ô∏è‚É£  ‰∏ã‰∏ÄÊ≠•Êìç‰Ωú"
echo "--------------------------------"
echo -e "${BLUE}Âª∫ËÆÆÊìç‰Ωú:${NC}"
echo "   1. ÈáçÂêØ Cursor IDE"
echo "   2. Ê∏ÖÈô§ÁºìÂ≠ò:"
echo "      rm -rf ~/Library/Application\ Support/Cursor/Cache/*"
echo "   3. Âú® Cursor ‰∏≠ÈáçÊñ∞Âä†ËΩΩ:"
echo "      Cmd + Shift + P ‚Üí 'Developer: Reload Window'"
echo ""

# 9. ÊÄßËÉΩÂü∫ÂáÜ
echo "9Ô∏è‚É£  ÊÄßËÉΩÂü∫ÂáÜÊµãËØï"
echo "--------------------------------"
echo "   ÊâßË°åÊñá‰ª∂ÊêúÁ¥¢ÊµãËØï..."

START_TIME=$(date +%s%N)
find . -type f -name "*.py" \
    -not -path "*/.git/*" \
    -not -path "*/.venv/*" \
    -not -path "*/__pycache__/*" \
    > /dev/null 2>&1
END_TIME=$(date +%s%N)
SEARCH_TIME=$(echo "scale=3; ($END_TIME - $START_TIME) / 1000000" | bc)

echo "   Python Êñá‰ª∂ÊêúÁ¥¢: ${SEARCH_TIME}ms"

if (( $(echo "$SEARCH_TIME < 100" | bc -l) )); then
    echo -e "   ${GREEN}‚úì ÊêúÁ¥¢ÊÄßËÉΩËâØÂ•Ω${NC}"
elif (( $(echo "$SEARCH_TIME < 500" | bc -l) )); then
    echo -e "   ${YELLOW}! ÊêúÁ¥¢ÊÄßËÉΩ‰∏ÄËà¨${NC}"
else
    echo -e "   ${RED}‚úó ÊêúÁ¥¢ÊÄßËÉΩËæÉÊÖ¢ÔºåÂª∫ËÆÆËøõ‰∏ÄÊ≠•‰ºòÂåñ${NC}"
fi
echo ""

# ÊÄªÁªì
echo "================================"
echo -e "${GREEN}‚úì ‰ºòÂåñÈ™åËØÅÂÆåÊàê${NC}"
echo ""
echo "üìä ÊëòË¶Å:"
echo "   - ÊÄªÊñá‰ª∂Êï∞: ${TOTAL_FILES}"
echo "   - Á¥¢ÂºïÊñá‰ª∂: ${INDEXED_FILES}"
echo "   - ‰ºòÂåñÁéá: ${REDUCTION_RATE}%"
echo ""
echo "üìñ Êü•ÁúãËØ¶ÁªÜ‰ºòÂåñÊåáÂçó:"
echo "   cat CURSOR_PERFORMANCE_OPTIMIZATION.md"
echo ""
