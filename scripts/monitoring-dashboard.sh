#!/usr/bin/env bash
set -euo pipefail

# VoiceHelper ÁõëÊéßÈù¢ÊùøÂêØÂä®ËÑöÊú¨
# Áî®ÈÄî: ‰∏ÄÈîÆÂêØÂä® Grafana/Prometheus/Jaeger/Kiali/Nacos ÁõëÊéßÈù¢Êùø

# È¢úËâ≤ÂÆö‰πâ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Êó•ÂøóÂáΩÊï∞
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Ê£ÄÊü• kubectl
check_kubectl() {
    if ! command -v kubectl &> /dev/null; then
        log_error "kubectl Êú™ÂÆâË£Ö"
        exit 1
    fi

    if ! kubectl cluster-info &> /dev/null; then
        log_error "Êó†Ê≥ïËøûÊé•Âà∞ Kubernetes ÈõÜÁæ§"
        exit 1
    fi
}

# Ê£ÄÊü• Pod ÊòØÂê¶Â∞±Áª™
check_pod_ready() {
    local namespace=$1
    local selector=$2
    local service_name=$3

    if kubectl get pods -n "$namespace" -l "$selector" &> /dev/null; then
        local ready=$(kubectl get pods -n "$namespace" -l "$selector" -o jsonpath='{.items[0].status.conditions[?(@.type=="Ready")].status}' 2>/dev/null || echo "False")
        if [ "$ready" = "True" ]; then
            return 0
        fi
    fi

    log_warn "${service_name} Pod Êú™Â∞±Áª™ÔºåË∑≥Ëøá"
    return 1
}

# ÂêØÂä® Grafana
start_grafana() {
    log_info "ÂêØÂä® Grafana Èù¢Êùø..."

    if ! check_pod_ready "voiceassistant-infra" "app=grafana" "Grafana"; then
        return 1
    fi

    # Êü•Êâæ Grafana Pod
    local grafana_pod=$(kubectl get pod -n voiceassistant-infra -l app=grafana -o jsonpath='{.items[0].metadata.name}' 2>/dev/null)

    if [ -z "$grafana_pod" ]; then
        log_error "Êú™ÊâæÂà∞ Grafana Pod"
        return 1
    fi

    log_success "Grafana Èù¢ÊùøÂêØÂä®‰∏≠..."
    echo "  ËÆøÈóÆÂú∞ÂùÄ: http://localhost:3000"
    echo "  ÈªòËÆ§Ë¥¶Âè∑: admin / admin"

    kubectl port-forward -n voiceassistant-infra "$grafana_pod" 3000:3000 &
    local pid=$!
    echo "$pid" >> /tmp/voicehelper-monitoring-pids.txt

    sleep 2
    log_success "Grafana Â∑≤ÂêØÂä® (PID: $pid)"
}

# ÂêØÂä® Prometheus
start_prometheus() {
    log_info "ÂêØÂä® Prometheus Èù¢Êùø..."

    if ! check_pod_ready "voiceassistant-infra" "app=prometheus" "Prometheus"; then
        return 1
    fi

    local prometheus_pod=$(kubectl get pod -n voiceassistant-infra -l app=prometheus -o jsonpath='{.items[0].metadata.name}' 2>/dev/null)

    if [ -z "$prometheus_pod" ]; then
        log_error "Êú™ÊâæÂà∞ Prometheus Pod"
        return 1
    fi

    log_success "Prometheus Èù¢ÊùøÂêØÂä®‰∏≠..."
    echo "  ËÆøÈóÆÂú∞ÂùÄ: http://localhost:9090"

    kubectl port-forward -n voiceassistant-infra "$prometheus_pod" 9090:9090 &
    local pid=$!
    echo "$pid" >> /tmp/voicehelper-monitoring-pids.txt

    sleep 2
    log_success "Prometheus Â∑≤ÂêØÂä® (PID: $pid)"
}

# ÂêØÂä® Jaeger
start_jaeger() {
    log_info "ÂêØÂä® Jaeger Èù¢Êùø..."

    if ! check_pod_ready "voiceassistant-infra" "app=jaeger" "Jaeger"; then
        return 1
    fi

    local jaeger_pod=$(kubectl get pod -n voiceassistant-infra -l app=jaeger -o jsonpath='{.items[0].metadata.name}' 2>/dev/null)

    if [ -z "$jaeger_pod" ]; then
        log_error "Êú™ÊâæÂà∞ Jaeger Pod"
        return 1
    fi

    log_success "Jaeger Èù¢ÊùøÂêØÂä®‰∏≠..."
    echo "  ËÆøÈóÆÂú∞ÂùÄ: http://localhost:16686"

    kubectl port-forward -n voiceassistant-infra "$jaeger_pod" 16686:16686 &
    local pid=$!
    echo "$pid" >> /tmp/voicehelper-monitoring-pids.txt

    sleep 2
    log_success "Jaeger Â∑≤ÂêØÂä® (PID: $pid)"
}

# ÂêØÂä® Kiali
start_kiali() {
    log_info "ÂêØÂä® Kiali Èù¢Êùø..."

    # Kiali ÈÄöÂ∏∏Âú® istio-system ÂëΩÂêçÁ©∫Èó¥
    if ! kubectl get namespace istio-system &> /dev/null; then
        log_warn "istio-system ÂëΩÂêçÁ©∫Èó¥‰∏çÂ≠òÂú®ÔºåË∑≥Ëøá Kiali"
        return 1
    fi

    if ! check_pod_ready "istio-system" "app=kiali" "Kiali"; then
        log_warn "Kiali Êú™ÂÆâË£ÖÔºå‰ΩøÁî® istioctl dashboard kiali ÊâãÂä®ÂêØÂä®"
        return 1
    fi

    local kiali_pod=$(kubectl get pod -n istio-system -l app=kiali -o jsonpath='{.items[0].metadata.name}' 2>/dev/null)

    if [ -z "$kiali_pod" ]; then
        log_warn "Êú™ÊâæÂà∞ Kiali Pod"
        return 1
    fi

    log_success "Kiali Èù¢ÊùøÂêØÂä®‰∏≠..."
    echo "  ËÆøÈóÆÂú∞ÂùÄ: http://localhost:20001"

    kubectl port-forward -n istio-system "$kiali_pod" 20001:20001 &
    local pid=$!
    echo "$pid" >> /tmp/voicehelper-monitoring-pids.txt

    sleep 2
    log_success "Kiali Â∑≤ÂêØÂä® (PID: $pid)"
}

# ÂêØÂä® Nacos
start_nacos() {
    log_info "ÂêØÂä® Nacos Èù¢Êùø..."

    if ! check_pod_ready "voiceassistant-infra" "app=nacos" "Nacos"; then
        return 1
    fi

    local nacos_pod=$(kubectl get pod -n voiceassistant-infra -l app=nacos -o jsonpath='{.items[0].metadata.name}' 2>/dev/null)

    if [ -z "$nacos_pod" ]; then
        log_error "Êú™ÊâæÂà∞ Nacos Pod"
        return 1
    fi

    log_success "Nacos Èù¢ÊùøÂêØÂä®‰∏≠..."
    echo "  ËÆøÈóÆÂú∞ÂùÄ: http://localhost:8848/nacos"
    echo "  ÈªòËÆ§Ë¥¶Âè∑: nacos / nacos"

    kubectl port-forward -n voiceassistant-infra "$nacos_pod" 8848:8848 &
    local pid=$!
    echo "$pid" >> /tmp/voicehelper-monitoring-pids.txt

    sleep 2
    log_success "Nacos Â∑≤ÂêØÂä® (PID: $pid)"
}

# ÂêØÂä®ÊâÄÊúâÈù¢Êùø
start_all() {
    log_info "ÂêØÂä®ÊâÄÊúâÁõëÊéßÈù¢Êùø..."
    echo ""

    start_grafana || true
    echo ""
    start_prometheus || true
    echo ""
    start_jaeger || true
    echo ""
    start_kiali || true
    echo ""
    start_nacos || true
    echo ""

    show_summary
}

# ÂÅúÊ≠¢ÊâÄÊúâÈù¢Êùø
stop_all() {
    log_info "ÂÅúÊ≠¢ÊâÄÊúâÁõëÊéßÈù¢Êùø..."

    if [ -f /tmp/voicehelper-monitoring-pids.txt ]; then
        while read -r pid; do
            if ps -p "$pid" > /dev/null 2>&1; then
                log_info "ÂÅúÊ≠¢ËøõÁ®ã: $pid"
                kill "$pid" 2>/dev/null || true
            fi
        done < /tmp/voicehelper-monitoring-pids.txt

        rm -f /tmp/voicehelper-monitoring-pids.txt
        log_success "ÊâÄÊúâÁõëÊéßÈù¢ÊùøÂ∑≤ÂÅúÊ≠¢"
    else
        log_warn "Êú™ÊâæÂà∞ËøêË°å‰∏≠ÁöÑÁõëÊéßÈù¢Êùø"
    fi
}

# ÊòæÁ§∫ÊëòË¶Å‰ø°ÊÅØ
show_summary() {
    echo ""
    log_info "========================================"
    log_info "ÁõëÊéßÈù¢ÊùøÂ∑≤ÂêØÂä®"
    log_info "========================================"
    echo ""
    echo "üìä Grafana:    http://localhost:3000    (admin/admin)"
    echo "üìà Prometheus: http://localhost:9090"
    echo "üîç Jaeger:     http://localhost:16686"
    echo "üï∏Ô∏è  Kiali:      http://localhost:20001"
    echo "‚öôÔ∏è  Nacos:      http://localhost:8848/nacos (nacos/nacos)"
    echo ""
    log_info "ÂÅúÊ≠¢ÊâÄÊúâÈù¢Êùø: $0 stop"
    log_info "Êü•ÁúãËøêË°åÁä∂ÊÄÅ: $0 status"
    echo ""
    log_warn "ÊèêÁ§∫: Êåâ Ctrl+C ‰∏ç‰ºöÂÅúÊ≠¢ÂêéÂè∞ËøõÁ®ãÔºåËØ∑‰ΩøÁî® '$0 stop' ÂÅúÊ≠¢"
}

# ÊòæÁ§∫ËøêË°åÁä∂ÊÄÅ
show_status() {
    log_info "Ê£ÄÊü•ÁõëÊéßÈù¢ÊùøÁä∂ÊÄÅ..."
    echo ""

    if [ ! -f /tmp/voicehelper-monitoring-pids.txt ]; then
        log_warn "Ê≤°ÊúâËøêË°å‰∏≠ÁöÑÁõëÊéßÈù¢Êùø"
        return
    fi

    local running=0
    while read -r pid; do
        if ps -p "$pid" > /dev/null 2>&1; then
            local cmd=$(ps -p "$pid" -o args= | head -c 50)
            log_success "ËøêË°å‰∏≠: PID=$pid, CMD=$cmd..."
            running=$((running + 1))
        fi
    done < /tmp/voicehelper-monitoring-pids.txt

    echo ""
    if [ $running -gt 0 ]; then
        log_success "ÂÖ± $running ‰∏™ÁõëÊéßÈù¢ÊùøËøêË°å‰∏≠"
    else
        log_warn "Ê≤°ÊúâËøêË°å‰∏≠ÁöÑÁõëÊéßÈù¢Êùø"
        rm -f /tmp/voicehelper-monitoring-pids.txt
    fi
}

# ÊòæÁ§∫Â∏ÆÂä©‰ø°ÊÅØ
show_help() {
    cat << EOF
VoiceHelper ÁõëÊéßÈù¢ÊùøÂêØÂä®ËÑöÊú¨

Áî®Ê≥ï: $0 <ÂëΩ‰ª§>

ÂëΩ‰ª§:
  all          ÂêØÂä®ÊâÄÊúâÁõëÊéßÈù¢Êùø
  grafana      ÂêØÂä® Grafana
  prometheus   ÂêØÂä® Prometheus
  jaeger       ÂêØÂä® Jaeger
  kiali        ÂêØÂä® Kiali
  nacos        ÂêØÂä® Nacos
  stop         ÂÅúÊ≠¢ÊâÄÊúâÁõëÊéßÈù¢Êùø
  status       Êü•ÁúãËøêË°åÁä∂ÊÄÅ
  -h, --help   ÊòæÁ§∫Â∏ÆÂä©‰ø°ÊÅØ

Á§∫‰æã:
  $0 all          # ÂêØÂä®ÊâÄÊúâÈù¢Êùø
  $0 grafana      # ‰ªÖÂêØÂä® Grafana
  $0 stop         # ÂÅúÊ≠¢ÊâÄÊúâÈù¢Êùø
  $0 status       # Êü•ÁúãÁä∂ÊÄÅ

Ê≥®ÊÑè:
  - Èù¢Êùø‰ºöÂú®ÂêéÂè∞ËøêË°å
  - ‰ΩøÁî® 'stop' ÂëΩ‰ª§ÂÅúÊ≠¢ÊâÄÊúâÈù¢Êùø
  - Á°Æ‰øùÂØπÂ∫îÊúçÂä°Â∑≤ÈÉ®ÁΩ≤Âà∞ K8s ÈõÜÁæ§

EOF
}

# ‰∏ªÂáΩÊï∞
main() {
    # Ê£ÄÊü• kubectl
    check_kubectl

    # Ê∏ÖÁêÜÊóßÁöÑ PID Êñá‰ª∂
    if [ -f /tmp/voicehelper-monitoring-pids.txt ]; then
        while read -r pid; do
            if ! ps -p "$pid" > /dev/null 2>&1; then
                sed -i.bak "/^$pid$/d" /tmp/voicehelper-monitoring-pids.txt 2>/dev/null || true
            fi
        done < /tmp/voicehelper-monitoring-pids.txt
    fi

    # Ëß£ÊûêÂëΩ‰ª§
    case "${1:-all}" in
        all)
            start_all
            ;;
        grafana)
            start_grafana
            ;;
        prometheus)
            start_prometheus
            ;;
        jaeger)
            start_jaeger
            ;;
        kiali)
            start_kiali
            ;;
        nacos)
            start_nacos
            ;;
        stop)
            stop_all
            ;;
        status)
            show_status
            ;;
        -h|--help)
            show_help
            ;;
        *)
            log_error "Êú™Áü•ÂëΩ‰ª§: $1"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# ÊâßË°å‰∏ªÂáΩÊï∞
main "$@"
