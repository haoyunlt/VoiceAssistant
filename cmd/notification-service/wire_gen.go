// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/google/wire"
	"voiceassistant/cmd/notification-service/internal/biz"
	"voiceassistant/cmd/notification-service/internal/data"
	"voiceassistant/cmd/notification-service/internal/infra"
	"voiceassistant/cmd/notification-service/internal/server"
	"voiceassistant/cmd/notification-service/internal/service"
)

// Injectors from wire.go:

// wireApp initializes the application with dependency injection
func wireApp(config *Config, logger log.Logger) (*kratos.App, func(), error) {
	httpConfig := provideHTTPServerConfig(config)
	dataConfig := provideDataConfig(config)
	db, err := data.NewDB(dataConfig, logger)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup, err := data.NewData(db, logger)
	if err != nil {
		return nil, nil, err
	}
	notificationRepository := data.NewNotificationRepository(dataData, logger)
	templateRepository := data.NewTemplateRepository(dataData, logger)
	emailProvider := infra.NewEmailProvider(logger)
	smsProvider := infra.NewSMSProvider(logger)
	webSocketManager := infra.NewWebSocketManager(logger)
	notificationUsecase := biz.NewNotificationUsecase(notificationRepository, templateRepository, emailProvider, smsProvider, webSocketManager, logger)
	templateUsecase := biz.NewTemplateUsecase(templateRepository, logger)
	notificationService := service.NewNotificationService(notificationUsecase, templateUsecase, logger)
	httpServer := server.NewHTTPServer(httpConfig, notificationService, logger)
	grpcConfig := provideGRPCServerConfig(config)
	grpcServer := server.NewGRPCServer(grpcConfig, notificationService, logger)
	app := newApp(logger, httpServer, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}

// wire.go:

// ProviderSet is the wire provider set
var ProviderSet = wire.NewSet(

	provideDataConfig, data.NewDB, data.NewData, data.NewNotificationRepository, data.NewTemplateRepository, infra.NewEmailProvider, infra.NewSMSProvider, infra.NewWebSocketManager, infra.NewHealthChecker, infra.NewMetricsCollector, biz.NewNotificationUsecase, biz.NewTemplateUsecase, service.NewNotificationService, provideHTTPServerConfig,
	provideGRPCServerConfig, server.NewGRPCServer, server.NewHTTPServer, newApp,
)

// provideDataConfig extracts data configuration
func provideDataConfig(c *Config) *data.Config {
	return &c.Data.Database
}

// provideHTTPServerConfig extracts HTTP server configuration
func provideHTTPServerConfig(c *Config) *server.HTTPConfig {
	return &server.HTTPConfig{
		Addr:    c.Server.HTTP.Addr,
		Timeout: c.Server.HTTP.Timeout,
	}
}

// provideGRPCServerConfig extracts GRPC server configuration
func provideGRPCServerConfig(c *Config) *server.GRPCConfig {
	return &server.GRPCConfig{
		Addr:    c.Server.GRPC.Addr,
		Timeout: c.Server.GRPC.Timeout,
	}
}
