// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/google/wire"
	"voiceassistant/cmd/model-router/internal/application"
	"voiceassistant/cmd/model-router/internal/data"
	"voiceassistant/cmd/model-router/internal/domain"
	"voiceassistant/cmd/model-router/internal/infrastructure"
	"voiceassistant/cmd/model-router/internal/server"
	"voiceassistant/cmd/model-router/internal/service"
)

// Injectors from wire.go:

func wireApp(cfg *Config, logger log.Logger) (*kratos.App, func(), error) {
	modelRegistry := provideModelRegistry(cfg, logger)
	config := provideDBConfig(cfg)
	db, err := data.NewDB(config, logger)
	if err != nil {
		return nil, nil, err
	}
	redisConfig := provideRedisConfig(cfg)
	client, cleanup, err := data.NewRedis(redisConfig, logger)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup2, err := data.NewData(db, client, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	abTestRepository := data.NewABTestRepository(dataData, logger)
	abTestCacheImpl := infrastructure.NewABTestCache(client, logger)
	abTestingServiceV2 := application.NewABTestingServiceV2(abTestRepository, abTestCacheImpl, modelRegistry, logger)
	routingService := application.NewRoutingService(modelRegistry, abTestingServiceV2)
	budgetConfig := provideBudgetConfig(cfg)
	costOptimizer := application.NewCostOptimizer(modelRegistry, budgetConfig)
	fallbackManager := application.NewFallbackManager(modelRegistry)
	modelRouterService := service.NewModelRouterService(routingService, abTestingServiceV2, costOptimizer, fallbackManager, logger)
	httpServer := provideHTTPServer(modelRouterService, logger, cfg)
	app := newApp(cfg, logger, httpServer)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

// ProviderSet 依赖注入集合
var ProviderSet = wire.NewSet(

	provideDBConfig,
	provideRedisConfig,
	provideBudgetConfig, data.NewDB, data.NewRedis, data.NewData, data.NewABTestRepository, infrastructure.NewABTestCache, wire.Bind(new(application.ABTestCache), new(*infrastructure.ABTestCacheImpl)), provideModelRegistry, application.NewABTestingServiceV2, application.NewRoutingService, application.NewCostOptimizer, application.NewFallbackManager, service.NewModelRouterService, provideHTTPServer, server.NewGRPCServer, server.NewABTestHandler,
)

// provideDBConfig 提供数据库配置
func provideDBConfig(cfg *Config) *data.Config {
	return &cfg.Data.Database
}

// provideRedisConfig 提供Redis配置
func provideRedisConfig(cfg *Config) *data.RedisConfig {
	return &data.RedisConfig{
		Addr:         cfg.Data.Redis.Addr,
		Password:     cfg.Data.Redis.Password,
		DB:           cfg.Data.Redis.DB,
		DialTimeout:  cfg.Data.Redis.DialTimeout,
		ReadTimeout:  cfg.Data.Redis.ReadTimeout,
		WriteTimeout: cfg.Data.Redis.WriteTimeout,
	}
}

// provideBudgetConfig 提供预算配置
func provideBudgetConfig(cfg *Config) *application.BudgetConfig {
	return &application.BudgetConfig{
		DailyBudget:    100.0,
		WeeklyBudget:   500.0,
		MonthlyBudget:  2000.0,
		AlertThreshold: 0.8,
	}
}

// provideModelRegistry 提供模型注册表
func provideModelRegistry(cfg *Config, logger log.Logger) *domain.ModelRegistry {
	registry := domain.NewModelRegistry()

	if cfg.Models.ConfigPath != "" {
		if err := loadModelsFromConfig(cfg.Models.ConfigPath, registry); err != nil {
			log.NewHelper(logger).Warnf("Failed to load models from config: %v", err)
		}
	}

	return registry
}

// provideHTTPServer 提供 HTTP 服务器
func provideHTTPServer(service2 *service.ModelRouterService,
	logger log.Logger,
	cfg *Config,
) *server.HTTPServer {
	return server.NewHTTPServer(service2, logger, cfg.Server.HTTP.Addr)
}

// loadModelsFromConfig 从配置文件加载模型
func loadModelsFromConfig(path string, registry *domain.ModelRegistry) error {
	models, err := domain.LoadModelsFromFile(path)
	if err != nil {
		return err
	}

	for _, model := range models {
		if err := registry.Register(model); err != nil {
			return err
		}
	}

	return nil
}
