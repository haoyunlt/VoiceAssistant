// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"go.uber.org/zap"
	"voiceassistant/cmd/analytics-service/internal/app"
	"voiceassistant/cmd/analytics-service/internal/biz"
	"voiceassistant/cmd/analytics-service/internal/conf"
	"voiceassistant/cmd/analytics-service/internal/data"
	"voiceassistant/cmd/analytics-service/internal/server"
	"voiceassistant/cmd/analytics-service/internal/service"
)

// Injectors from wire.go:

// initApp 初始化应用
func initApp(config *conf.Config, logger *zap.Logger) (*app.App, func(), error) {
	clickHouseConfig := provideClickHouseConfig(config)
	clickHouseClient, err := data.NewClickHouseClient(clickHouseConfig)
	if err != nil {
		return nil, nil, err
	}
	metricRepository := data.NewMetricRepository(clickHouseClient)
	metricUsecase := biz.NewMetricUsecase(metricRepository)
	dbConfig := provideDBConfig(config)
	db, err := data.NewDB(dbConfig)
	if err != nil {
		return nil, nil, err
	}
	reportRepository := data.NewReportRepository(db)
	reportUsecase := biz.NewReportUsecase(reportRepository, metricRepository)
	memoryCache := data.NewMemoryCache()
	realtimeDashboardUsecase := biz.NewRealtimeDashboardUsecase(clickHouseClient, memoryCache)
	analyticsService := service.NewAnalyticsService(metricUsecase, reportUsecase, realtimeDashboardUsecase)
	httpServer := server.NewHTTPServer(analyticsService, logger)
	appApp := app.NewApp(logger, httpServer, db, clickHouseClient)
	return appApp, func() {
	}, nil
}

// wire.go:

// provideDBConfig 提供数据库配置
func provideDBConfig(config *conf.Config) *data.DBConfig {
	return &data.DBConfig{
		Host:            config.Database.Host,
		Port:            config.Database.Port,
		DBName:          config.Database.DBName,
		User:            config.Database.User,
		Password:        config.Database.Password,
		SSLMode:         config.Database.SSLMode,
		MaxOpenConns:    config.Database.MaxOpenConns,
		MaxIdleConns:    config.Database.MaxIdleConns,
		ConnMaxLifetime: config.Database.ConnMaxLifetime,
	}
}

// provideClickHouseConfig 提供 ClickHouse 配置
func provideClickHouseConfig(config *conf.Config) *data.ClickHouseConfig {
	return &data.ClickHouseConfig{
		Addr:     config.ClickHouse.Addr,
		Database: config.ClickHouse.Database,
		Username: config.ClickHouse.Username,
		Password: config.ClickHouse.Password,
	}
}
