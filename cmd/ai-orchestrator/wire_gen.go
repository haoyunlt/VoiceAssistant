// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"voiceassistant/cmd/ai-orchestrator/internal/biz"
	"voiceassistant/cmd/ai-orchestrator/internal/data"
	"voiceassistant/cmd/ai-orchestrator/internal/domain"
	"voiceassistant/cmd/ai-orchestrator/internal/server"
	"voiceassistant/cmd/ai-orchestrator/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(config *Config, logger log.Logger) (*kratos.App, func(), error) {
	dataConfig := provideDataConfig(config)
	db, err := data.NewDB(dataConfig, logger)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup, err := data.NewData(db, logger)
	if err != nil {
		return nil, nil, err
	}
	taskRepository := data.NewTaskRepo(dataData, logger)
	grpcServiceClient := data.NewServiceClient(logger)
	ragPipeline := domain.NewRAGPipeline(grpcServiceClient)
	agentPipeline := domain.NewAgentPipeline(grpcServiceClient)
	voicePipeline := domain.NewVoicePipeline(grpcServiceClient)
	taskUsecase := biz.NewTaskUsecase(taskRepository, ragPipeline, agentPipeline, voicePipeline, logger)
	orchestratorService := service.NewOrchestratorService(taskUsecase, logger)
	grpcServer := server.NewGRPCServer(orchestratorService, logger)
	httpServer := server.NewHTTPServer(orchestratorService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}

// wire.go:

// provideDataConfig 提供数据层配置
func provideDataConfig(c *Config) *data.Config {
	return &data.Config{
		Driver:          c.Data.Database.Driver,
		Source:          c.Data.Database.Source,
		MaxIdleConns:    c.Data.Database.MaxIdleConns,
		MaxOpenConns:    c.Data.Database.MaxOpenConns,
		ConnMaxLifetime: ParseDuration(c.Data.Database.ConnMaxLifetime),
	}
}
