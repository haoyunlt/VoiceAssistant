---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: voiceassistant-infra
  labels:
    app: postgres
data:
  POSTGRES_DB: "voiceassistant"
  POSTGRES_USER: "postgres"
  PGDATA: "/var/lib/postgresql/data/pgdata"

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: voiceassistant-infra
  labels:
    app: postgres
type: Opaque
stringData:
  POSTGRES_PASSWORD: "changeme"

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: voiceassistant-infra
  labels:
    app: postgres
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app: postgres

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: voiceassistant-infra
  labels:
    app: postgres
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: postgres
        envFrom:
        - configMapRef:
            name: postgres-config
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        resources:
          requests:
            cpu: 1000m
            memory: 2Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 3
          timeoutSeconds: 1
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config-file
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
      
      # Postgres Exporter for Prometheus
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.15.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9187
          name: metrics
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://postgres:$(POSTGRES_PASSWORD)@localhost:5432/voiceassistant?sslmode=disable"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 128Mi
      
      volumes:
      - name: postgres-config-file
        configMap:
          name: postgres-tuning-config
          optional: true
  
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 50Gi

---
# PostgreSQL性能调优配置(可选)
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-tuning-config
  namespace: voiceassistant-infra
data:
  postgresql.conf: |
    # 连接设置
    max_connections = 200
    shared_buffers = 1GB
    effective_cache_size = 3GB
    maintenance_work_mem = 256MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    work_mem = 5242kB
    min_wal_size = 1GB
    max_wal_size = 4GB
    max_worker_processes = 4
    max_parallel_workers_per_gather = 2
    max_parallel_workers = 4
    max_parallel_maintenance_workers = 2
    
    # 日志设置
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_rotation_age = 1d
    log_rotation_size = 100MB
    log_min_duration_statement = 1000
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    log_lock_waits = on
    
    # 性能监控
    shared_preload_libraries = 'pg_stat_statements'
    pg_stat_statements.track = all

---
# 初始化SQL脚本(可选)
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: voiceassistant-infra
data:
  01-create-databases.sql: |
    -- 创建各服务数据库
    CREATE DATABASE identity;
    CREATE DATABASE conversation;
    CREATE DATABASE knowledge;
    CREATE DATABASE notification;
    
    -- 创建pgvector扩展(用于向量搜索)
    \c knowledge
    CREATE EXTENSION IF NOT EXISTS vector;
    
    -- 创建用户和权限
    CREATE USER identity_user WITH ENCRYPTED PASSWORD 'changeme';
    CREATE USER conversation_user WITH ENCRYPTED PASSWORD 'changeme';
    CREATE USER knowledge_user WITH ENCRYPTED PASSWORD 'changeme';
    
    GRANT ALL PRIVILEGES ON DATABASE identity TO identity_user;
    GRANT ALL PRIVILEGES ON DATABASE conversation TO conversation_user;
    GRANT ALL PRIVILEGES ON DATABASE knowledge TO knowledge_user;

