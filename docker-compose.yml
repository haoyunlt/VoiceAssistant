# VoiceHelper - 完整部署配置
# 包含所有 Go 服务、Python 服务和基础设施
version: "3.9"

services:
  # ============================================
  # 基础设施服务
  # ============================================

  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: va-postgres
    environment:
      POSTGRES_USER: voicehelper
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: voicehelper
      POSTGRES_INITDB_ARGS: "-E UTF8"
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./migrations/postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U voicehelper"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - voice-assistant
    restart: unless-stopped

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: va-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - voice-assistant
    restart: unless-stopped

  # Kafka 消息队列
  kafka:
    image: apache/kafka:3.7.0
    container_name: va-kafka
    environment:
      - KAFKA_NODE_ID=1
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_NUM_PARTITIONS=3
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "kafka-broker-api-versions.sh --bootstrap-server localhost:9092 || exit 1",
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - voice-assistant
    restart: unless-stopped

  # Milvus 向量数据库 (Standalone)
  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: va-etcd
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    volumes:
      - etcd-data:/etcd
    networks:
      - voice-assistant
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: va-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - voice-assistant
    restart: unless-stopped

  milvus:
    image: milvusdb/milvus:v2.3.0
    container_name: va-milvus
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
    ports:
      - "19530:19530"
      - "9091:9091"
    volumes:
      - milvus-data:/var/lib/milvus
    depends_on:
      - etcd
      - minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      timeout: 20s
      retries: 5
    networks:
      - voice-assistant
    restart: unless-stopped

  # ClickHouse 分析数据库
  clickhouse:
    image: clickhouse/clickhouse-server:23.8-alpine
    container_name: va-clickhouse
    environment:
      CLICKHOUSE_DB: voicehelper
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-clickhouse}
    ports:
      - "8123:8123"
      - "9009:9000"
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - ./migrations/clickhouse:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - voice-assistant
    restart: unless-stopped

  # Nacos 配置中心 (可选)
  nacos:
    image: nacos/nacos-server:v2.3.0
    container_name: va-nacos
    environment:
      MODE: standalone
      SPRING_DATASOURCE_PLATFORM: embedded
    ports:
      - "8848:8848"
      - "9848:9848"
    volumes:
      - nacos-data:/home/nacos/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8848/nacos/"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - voice-assistant
    restart: unless-stopped
    profiles:
      - nacos

  # ============================================
  # Go 服务 (4个已编译成功)
  # ============================================

  # Analytics Service
  analytics-service:
    build:
      context: .
      dockerfile: cmd/analytics-service/Dockerfile
    container_name: va-analytics-service
    environment:
      - CONFIG_PATH=/app/configs/app/analytics-service.yaml
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=voicehelper
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - DB_NAME=voicehelper
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis123}
      - CLICKHOUSE_ADDR=clickhouse:9000
      - KAFKA_BROKERS=kafka:9092
    ports:
      - "8010:8000"
      - "9010:9000"
    volumes:
      - ./configs:/app/configs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - voice-assistant
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Orchestrator
  ai-orchestrator:
    build:
      context: .
      dockerfile: cmd/ai-orchestrator/Dockerfile
    container_name: va-ai-orchestrator
    environment:
      - CONFIG_PATH=/app/configs/app/ai-orchestrator.yaml
      - DB_HOST=postgres
      - DB_PORT=5432
      - REDIS_ADDR=redis:6379
      - KAFKA_BROKERS=kafka:9092
      - AGENT_ENGINE_URL=http://agent-engine:8003
      - RAG_ENGINE_URL=http://rag-engine:8004
      - VOICE_ENGINE_URL=http://voice-engine:8005
    ports:
      - "8011:8000"
      - "9011:9000"
    volumes:
      - ./configs:/app/configs
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - voice-assistant
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Model Router
  model-router:
    build:
      context: .
      dockerfile: cmd/model-router/Dockerfile
    container_name: va-model-router
    environment:
      - CONFIG_PATH=/app/configs/app/model-router.yaml
      - DB_HOST=postgres
      - DB_PORT=5432
      - REDIS_ADDR=redis:6379
    ports:
      - "8012:8000"
      - "9012:9000"
    volumes:
      - ./configs:/app/configs
    depends_on:
      - postgres
      - redis
    networks:
      - voice-assistant
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: cmd/notification-service/Dockerfile
    container_name: va-notification-service
    environment:
      - CONFIG_PATH=/app/configs/app/notification-service.yaml
      - DB_HOST=postgres
      - DB_PORT=5432
      - REDIS_ADDR=redis:6379
      - KAFKA_BROKERS=kafka:9092
    ports:
      - "8013:8000"
      - "9013:9000"
    volumes:
      - ./configs:/app/configs
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - voice-assistant
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # Python 服务 (9个)
  # ============================================

  # Agent Engine
  agent-engine:
    build:
      context: ./algo/agent-engine
      dockerfile: Dockerfile
    container_name: va-agent-engine
    environment:
      - HOST=0.0.0.0
      - PORT=8003
      - CONFIG_PATH=/app/configs/agent-engine.yaml
      - MILVUS_HOST=milvus
      - MILVUS_PORT=19530
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MODEL_ADAPTER_URL=http://model-adapter:8002
      - RAG_ENGINE_URL=http://rag-engine:8004
    ports:
      - "8003:8003"
    volumes:
      - ./configs:/app/configs
    depends_on:
      - milvus
      - redis
    networks:
      - voice-assistant
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RAG Engine
  rag-engine:
    build:
      context: ./algo/rag-engine
      dockerfile: Dockerfile
    container_name: va-rag-engine
    environment:
      - HOST=0.0.0.0
      - PORT=8004
      - MILVUS_HOST=milvus
      - MILVUS_PORT=19530
      - REDIS_HOST=redis
      - MODEL_ADAPTER_URL=http://model-adapter:8002
      - RETRIEVAL_SERVICE_URL=http://retrieval-service:8006
    ports:
      - "8004:8004"
    volumes:
      - ./configs:/app/configs
    depends_on:
      - milvus
      - redis
    networks:
      - voice-assistant
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Voice Engine
  voice-engine:
    build:
      context: ./algo/voice-engine
      dockerfile: Dockerfile
    container_name: va-voice-engine
    environment:
      - HOST=0.0.0.0
      - PORT=8005
      - REDIS_HOST=redis
      - AZURE_SPEECH_KEY=${AZURE_SPEECH_KEY}
      - AZURE_SPEECH_REGION=${AZURE_SPEECH_REGION:-eastus}
    ports:
      - "8005:8005"
    volumes:
      - ./configs:/app/configs
    depends_on:
      - redis
    networks:
      - voice-assistant
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Model Adapter
  model-adapter:
    build:
      context: ./algo/model-adapter
      dockerfile: Dockerfile
    container_name: va-model-adapter
    environment:
      - HOST=0.0.0.0
      - PORT=8002
      - REDIS_HOST=redis
      - MODEL_ROUTER_URL=http://model-router:8012
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    ports:
      - "8002:8002"
    volumes:
      - ./configs:/app/configs
    depends_on:
      - redis
    networks:
      - voice-assistant
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Retrieval Service
  retrieval-service:
    build:
      context: ./algo/retrieval-service
      dockerfile: Dockerfile
    container_name: va-retrieval-service
    environment:
      - HOST=0.0.0.0
      - PORT=8006
      - MILVUS_HOST=milvus
      - MILVUS_PORT=19530
      - REDIS_HOST=redis
      - MODEL_ADAPTER_URL=http://model-adapter:8002
    ports:
      - "8006:8006"
    volumes:
      - ./configs:/app/configs
    depends_on:
      - milvus
      - redis
    networks:
      - voice-assistant
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Indexing Service
  indexing-service:
    build:
      context: ./algo/indexing-service
      dockerfile: Dockerfile
    container_name: va-indexing-service
    environment:
      - HOST=0.0.0.0
      - PORT=8011
      - MILVUS_HOST=milvus
      - MILVUS_PORT=19530
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - MODEL_ADAPTER_URL=http://model-adapter:8002
    ports:
      - "8011:8011"
    volumes:
      - ./configs:/app/configs
    depends_on:
      - milvus
      - postgres
    networks:
      - voice-assistant
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Knowledge Service (Python)
  knowledge-service-py:
    build:
      context: ./algo/knowledge-service
      dockerfile: Dockerfile
    container_name: va-knowledge-service-py
    environment:
      - HOST=0.0.0.0
      - PORT=8010
      - MILVUS_HOST=milvus
      - NEO4J_URI=${NEO4J_URI:-bolt://neo4j:7687}
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-password}
    ports:
      - "8010:8010"
    volumes:
      - ./configs:/app/configs
    depends_on:
      - milvus
    networks:
      - voice-assistant
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - python-knowledge

  # Multimodal Engine
  multimodal-engine:
    build:
      context: ./algo/multimodal-engine
      dockerfile: Dockerfile
    container_name: va-multimodal-engine
    environment:
      - HOST=0.0.0.0
      - PORT=8009
      - REDIS_HOST=redis
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      - MODEL_ADAPTER_URL=http://model-adapter:8002
    ports:
      - "8009:8009"
    volumes:
      - ./configs:/app/configs
    depends_on:
      - redis
      - minio
    networks:
      - voice-assistant
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8009/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Vector Store Adapter
  vector-store-adapter:
    build:
      context: ./algo/vector-store-adapter
      dockerfile: Dockerfile
    container_name: va-vector-store-adapter
    environment:
      - HOST=0.0.0.0
      - PORT=8009
      - MILVUS_HOST=milvus
      - MILVUS_PORT=19530
      - REDIS_HOST=redis
    ports:
      - "8009:8009"
    volumes:
      - ./configs:/app/configs
    depends_on:
      - milvus
      - redis
    networks:
      - voice-assistant
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # 监控服务 (可选)
  # ============================================

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: va-prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
    ports:
      - "9090:9090"
    volumes:
      - ./configs/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - voice-assistant
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: va-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./configs/monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards
      - ./configs/monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    depends_on:
      - prometheus
    networks:
      - voice-assistant
    restart: unless-stopped
    profiles:
      - monitoring

  # Jaeger (Tracing)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: va-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686" # UI
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
    networks:
      - voice-assistant
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres-data:
  redis-data:
  kafka-data:
  etcd-data:
  minio-data:
  milvus-data:
  clickhouse-data:
  nacos-data:
  prometheus-data:
  grafana-data:

networks:
  voice-assistant:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
