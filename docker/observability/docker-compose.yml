version: "3.8"

services:
  # Jaeger - 分布式追踪后端
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: jaeger
    ports:
      - "6831:6831/udp" # Jaeger agent UDP
      - "6832:6832/udp" # Jaeger agent UDP
      - "5778:5778" # Agent config
      - "16686:16686" # Jaeger UI
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
      - "14250:14250" # Collector gRPC
      - "14268:14268" # Collector HTTP
      - "14269:14269" # Collector health
      - "9411:9411" # Zipkin compatible endpoint
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_DIRECTORY_KEY=/badger/key
    volumes:
      - jaeger-badger:/badger
    networks:
      - observability
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:14269"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Tempo - Grafana 轻量级追踪后端（可选，替代Jaeger）
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: ["-config.file=/etc/tempo.yaml"]
    ports:
      - "3200:3200" # Tempo HTTP
      - "4319:4317" # OTLP gRPC (避免与Jaeger冲突)
      - "4320:4318" # OTLP HTTP
      - "9095:9095" # Tempo gRPC
    volumes:
      - ./tempo.yaml:/etc/tempo.yaml
      - tempo-data:/tmp/tempo
    networks:
      - observability
    restart: unless-stopped

  # Prometheus - 指标存储
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=30d"
      - "--web.enable-lifecycle"
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - observability
    restart: unless-stopped

  # Grafana - 可视化平台
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    networks:
      - observability
    depends_on:
      - prometheus
      - jaeger
      - tempo
    restart: unless-stopped

  # OpenTelemetry Collector - 数据收集和路由
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    ports:
      - "1888:1888" # pprof extension
      - "8888:8888" # Prometheus metrics exposed by the collector
      - "8889:8889" # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4315:4317" # OTLP gRPC receiver (避免冲突)
      - "4316:4318" # OTLP HTTP receiver
      - "55679:55679" # zpages extension
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    networks:
      - observability
    depends_on:
      - jaeger
      - prometheus
    restart: unless-stopped

  # Loki - 日志聚合（可选）
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki.yaml:/etc/loki/local-config.yaml
      - loki-data:/loki
    networks:
      - observability
    restart: unless-stopped

volumes:
  jaeger-badger:
  tempo-data:
  prometheus-data:
  grafana-data:
  loki-data:

networks:
  observability:
    driver: bridge
