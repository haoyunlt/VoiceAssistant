# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from rag.v1 import rag_pb2 as rag_dot_v1_dot_rag__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in rag/v1/rag_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class RAGServiceStub(object):
    """RAGService 检索增强生成服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Query = channel.unary_unary(
                '/rag.v1.RAGService/Query',
                request_serializer=rag_dot_v1_dot_rag__pb2.QueryRequest.SerializeToString,
                response_deserializer=rag_dot_v1_dot_rag__pb2.QueryResponse.FromString,
                _registered_method=True)
        self.QueryStream = channel.unary_stream(
                '/rag.v1.RAGService/QueryStream',
                request_serializer=rag_dot_v1_dot_rag__pb2.QueryRequest.SerializeToString,
                response_deserializer=rag_dot_v1_dot_rag__pb2.QueryStreamResponse.FromString,
                _registered_method=True)
        self.SimpleQuery = channel.unary_unary(
                '/rag.v1.RAGService/SimpleQuery',
                request_serializer=rag_dot_v1_dot_rag__pb2.SimpleQueryRequest.SerializeToString,
                response_deserializer=rag_dot_v1_dot_rag__pb2.SimpleQueryResponse.FromString,
                _registered_method=True)
        self.GetStatus = channel.unary_unary(
                '/rag.v1.RAGService/GetStatus',
                request_serializer=rag_dot_v1_dot_rag__pb2.GetStatusRequest.SerializeToString,
                response_deserializer=rag_dot_v1_dot_rag__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.GetFeatures = channel.unary_unary(
                '/rag.v1.RAGService/GetFeatures',
                request_serializer=rag_dot_v1_dot_rag__pb2.GetFeaturesRequest.SerializeToString,
                response_deserializer=rag_dot_v1_dot_rag__pb2.FeaturesResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/rag.v1.RAGService/HealthCheck',
                request_serializer=rag_dot_v1_dot_rag__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=rag_dot_v1_dot_rag__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class RAGServiceServicer(object):
    """RAGService 检索增强生成服务
    """

    def Query(self, request, context):
        """查询（非流式）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryStream(self, request, context):
        """查询（流式）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SimpleQuery(self, request, context):
        """简化查询
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
        """服务状态
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFeatures(self, request, context):
        """功能列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """健康检查
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RAGServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Query': grpc.unary_unary_rpc_method_handler(
                    servicer.Query,
                    request_deserializer=rag_dot_v1_dot_rag__pb2.QueryRequest.FromString,
                    response_serializer=rag_dot_v1_dot_rag__pb2.QueryResponse.SerializeToString,
            ),
            'QueryStream': grpc.unary_stream_rpc_method_handler(
                    servicer.QueryStream,
                    request_deserializer=rag_dot_v1_dot_rag__pb2.QueryRequest.FromString,
                    response_serializer=rag_dot_v1_dot_rag__pb2.QueryStreamResponse.SerializeToString,
            ),
            'SimpleQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.SimpleQuery,
                    request_deserializer=rag_dot_v1_dot_rag__pb2.SimpleQueryRequest.FromString,
                    response_serializer=rag_dot_v1_dot_rag__pb2.SimpleQueryResponse.SerializeToString,
            ),
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=rag_dot_v1_dot_rag__pb2.GetStatusRequest.FromString,
                    response_serializer=rag_dot_v1_dot_rag__pb2.StatusResponse.SerializeToString,
            ),
            'GetFeatures': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFeatures,
                    request_deserializer=rag_dot_v1_dot_rag__pb2.GetFeaturesRequest.FromString,
                    response_serializer=rag_dot_v1_dot_rag__pb2.FeaturesResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=rag_dot_v1_dot_rag__pb2.HealthCheckRequest.FromString,
                    response_serializer=rag_dot_v1_dot_rag__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rag.v1.RAGService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rag.v1.RAGService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RAGService(object):
    """RAGService 检索增强生成服务
    """

    @staticmethod
    def Query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rag.v1.RAGService/Query',
            rag_dot_v1_dot_rag__pb2.QueryRequest.SerializeToString,
            rag_dot_v1_dot_rag__pb2.QueryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/rag.v1.RAGService/QueryStream',
            rag_dot_v1_dot_rag__pb2.QueryRequest.SerializeToString,
            rag_dot_v1_dot_rag__pb2.QueryStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SimpleQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rag.v1.RAGService/SimpleQuery',
            rag_dot_v1_dot_rag__pb2.SimpleQueryRequest.SerializeToString,
            rag_dot_v1_dot_rag__pb2.SimpleQueryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rag.v1.RAGService/GetStatus',
            rag_dot_v1_dot_rag__pb2.GetStatusRequest.SerializeToString,
            rag_dot_v1_dot_rag__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFeatures(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rag.v1.RAGService/GetFeatures',
            rag_dot_v1_dot_rag__pb2.GetFeaturesRequest.SerializeToString,
            rag_dot_v1_dot_rag__pb2.FeaturesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rag.v1.RAGService/HealthCheck',
            rag_dot_v1_dot_rag__pb2.HealthCheckRequest.SerializeToString,
            rag_dot_v1_dot_rag__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
