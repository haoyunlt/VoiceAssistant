# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from vector_store.v1 import vector_store_pb2 as vector__store_dot_v1_dot_vector__store__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in vector_store/v1/vector_store_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class VectorStoreServiceStub(object):
    """VectorStoreService 向量存储适配器服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateCollection = channel.unary_unary(
                '/vector_store.v1.VectorStoreService/CreateCollection',
                request_serializer=vector__store_dot_v1_dot_vector__store__pb2.CreateCollectionRequest.SerializeToString,
                response_deserializer=vector__store_dot_v1_dot_vector__store__pb2.CreateCollectionResponse.FromString,
                _registered_method=True)
        self.DeleteCollection = channel.unary_unary(
                '/vector_store.v1.VectorStoreService/DeleteCollection',
                request_serializer=vector__store_dot_v1_dot_vector__store__pb2.DeleteCollectionRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.ListCollections = channel.unary_unary(
                '/vector_store.v1.VectorStoreService/ListCollections',
                request_serializer=vector__store_dot_v1_dot_vector__store__pb2.ListCollectionsRequest.SerializeToString,
                response_deserializer=vector__store_dot_v1_dot_vector__store__pb2.ListCollectionsResponse.FromString,
                _registered_method=True)
        self.GetCollectionInfo = channel.unary_unary(
                '/vector_store.v1.VectorStoreService/GetCollectionInfo',
                request_serializer=vector__store_dot_v1_dot_vector__store__pb2.GetCollectionInfoRequest.SerializeToString,
                response_deserializer=vector__store_dot_v1_dot_vector__store__pb2.CollectionInfo.FromString,
                _registered_method=True)
        self.InsertVectors = channel.unary_unary(
                '/vector_store.v1.VectorStoreService/InsertVectors',
                request_serializer=vector__store_dot_v1_dot_vector__store__pb2.InsertVectorsRequest.SerializeToString,
                response_deserializer=vector__store_dot_v1_dot_vector__store__pb2.InsertVectorsResponse.FromString,
                _registered_method=True)
        self.InsertVectorsBatch = channel.unary_unary(
                '/vector_store.v1.VectorStoreService/InsertVectorsBatch',
                request_serializer=vector__store_dot_v1_dot_vector__store__pb2.InsertVectorsBatchRequest.SerializeToString,
                response_deserializer=vector__store_dot_v1_dot_vector__store__pb2.InsertVectorsBatchResponse.FromString,
                _registered_method=True)
        self.UpdateVector = channel.unary_unary(
                '/vector_store.v1.VectorStoreService/UpdateVector',
                request_serializer=vector__store_dot_v1_dot_vector__store__pb2.UpdateVectorRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.DeleteVector = channel.unary_unary(
                '/vector_store.v1.VectorStoreService/DeleteVector',
                request_serializer=vector__store_dot_v1_dot_vector__store__pb2.DeleteVectorRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.DeleteVectorsBatch = channel.unary_unary(
                '/vector_store.v1.VectorStoreService/DeleteVectorsBatch',
                request_serializer=vector__store_dot_v1_dot_vector__store__pb2.DeleteVectorsBatchRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.Search = channel.unary_unary(
                '/vector_store.v1.VectorStoreService/Search',
                request_serializer=vector__store_dot_v1_dot_vector__store__pb2.SearchRequest.SerializeToString,
                response_deserializer=vector__store_dot_v1_dot_vector__store__pb2.SearchResponse.FromString,
                _registered_method=True)
        self.SearchBatch = channel.unary_unary(
                '/vector_store.v1.VectorStoreService/SearchBatch',
                request_serializer=vector__store_dot_v1_dot_vector__store__pb2.SearchBatchRequest.SerializeToString,
                response_deserializer=vector__store_dot_v1_dot_vector__store__pb2.SearchBatchResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/vector_store.v1.VectorStoreService/HealthCheck',
                request_serializer=vector__store_dot_v1_dot_vector__store__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=vector__store_dot_v1_dot_vector__store__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class VectorStoreServiceServicer(object):
    """VectorStoreService 向量存储适配器服务
    """

    def CreateCollection(self, request, context):
        """创建集合
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCollection(self, request, context):
        """删除集合
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCollections(self, request, context):
        """列出集合
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCollectionInfo(self, request, context):
        """获取集合信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsertVectors(self, request, context):
        """插入向量
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsertVectorsBatch(self, request, context):
        """批量插入
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateVector(self, request, context):
        """更新向量
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteVector(self, request, context):
        """删除向量
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteVectorsBatch(self, request, context):
        """批量删除
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Search(self, request, context):
        """向量检索
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchBatch(self, request, context):
        """批量检索
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """健康检查
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VectorStoreServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCollection,
                    request_deserializer=vector__store_dot_v1_dot_vector__store__pb2.CreateCollectionRequest.FromString,
                    response_serializer=vector__store_dot_v1_dot_vector__store__pb2.CreateCollectionResponse.SerializeToString,
            ),
            'DeleteCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCollection,
                    request_deserializer=vector__store_dot_v1_dot_vector__store__pb2.DeleteCollectionRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ListCollections': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCollections,
                    request_deserializer=vector__store_dot_v1_dot_vector__store__pb2.ListCollectionsRequest.FromString,
                    response_serializer=vector__store_dot_v1_dot_vector__store__pb2.ListCollectionsResponse.SerializeToString,
            ),
            'GetCollectionInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCollectionInfo,
                    request_deserializer=vector__store_dot_v1_dot_vector__store__pb2.GetCollectionInfoRequest.FromString,
                    response_serializer=vector__store_dot_v1_dot_vector__store__pb2.CollectionInfo.SerializeToString,
            ),
            'InsertVectors': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertVectors,
                    request_deserializer=vector__store_dot_v1_dot_vector__store__pb2.InsertVectorsRequest.FromString,
                    response_serializer=vector__store_dot_v1_dot_vector__store__pb2.InsertVectorsResponse.SerializeToString,
            ),
            'InsertVectorsBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertVectorsBatch,
                    request_deserializer=vector__store_dot_v1_dot_vector__store__pb2.InsertVectorsBatchRequest.FromString,
                    response_serializer=vector__store_dot_v1_dot_vector__store__pb2.InsertVectorsBatchResponse.SerializeToString,
            ),
            'UpdateVector': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateVector,
                    request_deserializer=vector__store_dot_v1_dot_vector__store__pb2.UpdateVectorRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'DeleteVector': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteVector,
                    request_deserializer=vector__store_dot_v1_dot_vector__store__pb2.DeleteVectorRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'DeleteVectorsBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteVectorsBatch,
                    request_deserializer=vector__store_dot_v1_dot_vector__store__pb2.DeleteVectorsBatchRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Search': grpc.unary_unary_rpc_method_handler(
                    servicer.Search,
                    request_deserializer=vector__store_dot_v1_dot_vector__store__pb2.SearchRequest.FromString,
                    response_serializer=vector__store_dot_v1_dot_vector__store__pb2.SearchResponse.SerializeToString,
            ),
            'SearchBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchBatch,
                    request_deserializer=vector__store_dot_v1_dot_vector__store__pb2.SearchBatchRequest.FromString,
                    response_serializer=vector__store_dot_v1_dot_vector__store__pb2.SearchBatchResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=vector__store_dot_v1_dot_vector__store__pb2.HealthCheckRequest.FromString,
                    response_serializer=vector__store_dot_v1_dot_vector__store__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vector_store.v1.VectorStoreService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('vector_store.v1.VectorStoreService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class VectorStoreService(object):
    """VectorStoreService 向量存储适配器服务
    """

    @staticmethod
    def CreateCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vector_store.v1.VectorStoreService/CreateCollection',
            vector__store_dot_v1_dot_vector__store__pb2.CreateCollectionRequest.SerializeToString,
            vector__store_dot_v1_dot_vector__store__pb2.CreateCollectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vector_store.v1.VectorStoreService/DeleteCollection',
            vector__store_dot_v1_dot_vector__store__pb2.DeleteCollectionRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListCollections(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vector_store.v1.VectorStoreService/ListCollections',
            vector__store_dot_v1_dot_vector__store__pb2.ListCollectionsRequest.SerializeToString,
            vector__store_dot_v1_dot_vector__store__pb2.ListCollectionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCollectionInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vector_store.v1.VectorStoreService/GetCollectionInfo',
            vector__store_dot_v1_dot_vector__store__pb2.GetCollectionInfoRequest.SerializeToString,
            vector__store_dot_v1_dot_vector__store__pb2.CollectionInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InsertVectors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vector_store.v1.VectorStoreService/InsertVectors',
            vector__store_dot_v1_dot_vector__store__pb2.InsertVectorsRequest.SerializeToString,
            vector__store_dot_v1_dot_vector__store__pb2.InsertVectorsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InsertVectorsBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vector_store.v1.VectorStoreService/InsertVectorsBatch',
            vector__store_dot_v1_dot_vector__store__pb2.InsertVectorsBatchRequest.SerializeToString,
            vector__store_dot_v1_dot_vector__store__pb2.InsertVectorsBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateVector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vector_store.v1.VectorStoreService/UpdateVector',
            vector__store_dot_v1_dot_vector__store__pb2.UpdateVectorRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteVector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vector_store.v1.VectorStoreService/DeleteVector',
            vector__store_dot_v1_dot_vector__store__pb2.DeleteVectorRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteVectorsBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vector_store.v1.VectorStoreService/DeleteVectorsBatch',
            vector__store_dot_v1_dot_vector__store__pb2.DeleteVectorsBatchRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vector_store.v1.VectorStoreService/Search',
            vector__store_dot_v1_dot_vector__store__pb2.SearchRequest.SerializeToString,
            vector__store_dot_v1_dot_vector__store__pb2.SearchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SearchBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vector_store.v1.VectorStoreService/SearchBatch',
            vector__store_dot_v1_dot_vector__store__pb2.SearchBatchRequest.SerializeToString,
            vector__store_dot_v1_dot_vector__store__pb2.SearchBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vector_store.v1.VectorStoreService/HealthCheck',
            vector__store_dot_v1_dot_vector__store__pb2.HealthCheckRequest.SerializeToString,
            vector__store_dot_v1_dot_vector__store__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
