# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from voice.v1 import voice_pb2 as voice_dot_v1_dot_voice__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in voice/v1/voice_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class VoiceServiceStub(object):
    """VoiceService 语音服务（ASR + TTS + VAD）
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RecognizeSpeech = channel.unary_unary(
                '/voice.v1.VoiceService/RecognizeSpeech',
                request_serializer=voice_dot_v1_dot_voice__pb2.RecognizeRequest.SerializeToString,
                response_deserializer=voice_dot_v1_dot_voice__pb2.RecognizeResponse.FromString,
                _registered_method=True)
        self.RecognizeSpeechStream = channel.stream_stream(
                '/voice.v1.VoiceService/RecognizeSpeechStream',
                request_serializer=voice_dot_v1_dot_voice__pb2.RecognizeStreamRequest.SerializeToString,
                response_deserializer=voice_dot_v1_dot_voice__pb2.RecognizeStreamResponse.FromString,
                _registered_method=True)
        self.SynthesizeSpeech = channel.unary_unary(
                '/voice.v1.VoiceService/SynthesizeSpeech',
                request_serializer=voice_dot_v1_dot_voice__pb2.SynthesizeRequest.SerializeToString,
                response_deserializer=voice_dot_v1_dot_voice__pb2.SynthesizeResponse.FromString,
                _registered_method=True)
        self.SynthesizeSpeechStream = channel.unary_stream(
                '/voice.v1.VoiceService/SynthesizeSpeechStream',
                request_serializer=voice_dot_v1_dot_voice__pb2.SynthesizeRequest.SerializeToString,
                response_deserializer=voice_dot_v1_dot_voice__pb2.SynthesizeStreamResponse.FromString,
                _registered_method=True)
        self.DetectVoiceActivity = channel.unary_unary(
                '/voice.v1.VoiceService/DetectVoiceActivity',
                request_serializer=voice_dot_v1_dot_voice__pb2.VADRequest.SerializeToString,
                response_deserializer=voice_dot_v1_dot_voice__pb2.VADResponse.FromString,
                _registered_method=True)
        self.DetectVoiceActivityStream = channel.stream_stream(
                '/voice.v1.VoiceService/DetectVoiceActivityStream',
                request_serializer=voice_dot_v1_dot_voice__pb2.VADStreamRequest.SerializeToString,
                response_deserializer=voice_dot_v1_dot_voice__pb2.VADStreamResponse.FromString,
                _registered_method=True)
        self.FullDuplexConversation = channel.stream_stream(
                '/voice.v1.VoiceService/FullDuplexConversation',
                request_serializer=voice_dot_v1_dot_voice__pb2.FullDuplexRequest.SerializeToString,
                response_deserializer=voice_dot_v1_dot_voice__pb2.FullDuplexResponse.FromString,
                _registered_method=True)
        self.CloneVoice = channel.unary_unary(
                '/voice.v1.VoiceService/CloneVoice',
                request_serializer=voice_dot_v1_dot_voice__pb2.CloneVoiceRequest.SerializeToString,
                response_deserializer=voice_dot_v1_dot_voice__pb2.CloneVoiceResponse.FromString,
                _registered_method=True)
        self.ListClonedVoices = channel.unary_unary(
                '/voice.v1.VoiceService/ListClonedVoices',
                request_serializer=voice_dot_v1_dot_voice__pb2.ListClonedVoicesRequest.SerializeToString,
                response_deserializer=voice_dot_v1_dot_voice__pb2.ListClonedVoicesResponse.FromString,
                _registered_method=True)
        self.DiarizeSpeakers = channel.unary_unary(
                '/voice.v1.VoiceService/DiarizeSpeakers',
                request_serializer=voice_dot_v1_dot_voice__pb2.DiarizeRequest.SerializeToString,
                response_deserializer=voice_dot_v1_dot_voice__pb2.DiarizeResponse.FromString,
                _registered_method=True)
        self.AnalyzeEmotion = channel.unary_unary(
                '/voice.v1.VoiceService/AnalyzeEmotion',
                request_serializer=voice_dot_v1_dot_voice__pb2.EmotionRequest.SerializeToString,
                response_deserializer=voice_dot_v1_dot_voice__pb2.EmotionResponse.FromString,
                _registered_method=True)
        self.ListVoices = channel.unary_unary(
                '/voice.v1.VoiceService/ListVoices',
                request_serializer=voice_dot_v1_dot_voice__pb2.ListVoicesRequest.SerializeToString,
                response_deserializer=voice_dot_v1_dot_voice__pb2.ListVoicesResponse.FromString,
                _registered_method=True)
        self.ListLanguages = channel.unary_unary(
                '/voice.v1.VoiceService/ListLanguages',
                request_serializer=voice_dot_v1_dot_voice__pb2.ListLanguagesRequest.SerializeToString,
                response_deserializer=voice_dot_v1_dot_voice__pb2.ListLanguagesResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/voice.v1.VoiceService/HealthCheck',
                request_serializer=voice_dot_v1_dot_voice__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=voice_dot_v1_dot_voice__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class VoiceServiceServicer(object):
    """VoiceService 语音服务（ASR + TTS + VAD）
    """

    def RecognizeSpeech(self, request, context):
        """========== ASR（语音识别）==========
        批量识别
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecognizeSpeechStream(self, request_iterator, context):
        """流式识别
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SynthesizeSpeech(self, request, context):
        """========== TTS（语音合成）==========
        批量合成
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SynthesizeSpeechStream(self, request, context):
        """流式合成
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetectVoiceActivity(self, request, context):
        """========== VAD（语音活动检测）==========
        批量检测
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetectVoiceActivityStream(self, request_iterator, context):
        """流式检测
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FullDuplexConversation(self, request_iterator, context):
        """========== 全双工 ==========
        全双工对话
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloneVoice(self, request, context):
        """========== 语音克隆 ==========
        克隆音色
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListClonedVoices(self, request, context):
        """列出克隆的音色
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DiarizeSpeakers(self, request, context):
        """========== 说话人分离 ==========
        说话人分离
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeEmotion(self, request, context):
        """========== 情感分析 ==========
        语音情感分析
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListVoices(self, request, context):
        """========== 工具相关 ==========
        列出可用音色
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListLanguages(self, request, context):
        """列出支持的语言
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """健康检查
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VoiceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RecognizeSpeech': grpc.unary_unary_rpc_method_handler(
                    servicer.RecognizeSpeech,
                    request_deserializer=voice_dot_v1_dot_voice__pb2.RecognizeRequest.FromString,
                    response_serializer=voice_dot_v1_dot_voice__pb2.RecognizeResponse.SerializeToString,
            ),
            'RecognizeSpeechStream': grpc.stream_stream_rpc_method_handler(
                    servicer.RecognizeSpeechStream,
                    request_deserializer=voice_dot_v1_dot_voice__pb2.RecognizeStreamRequest.FromString,
                    response_serializer=voice_dot_v1_dot_voice__pb2.RecognizeStreamResponse.SerializeToString,
            ),
            'SynthesizeSpeech': grpc.unary_unary_rpc_method_handler(
                    servicer.SynthesizeSpeech,
                    request_deserializer=voice_dot_v1_dot_voice__pb2.SynthesizeRequest.FromString,
                    response_serializer=voice_dot_v1_dot_voice__pb2.SynthesizeResponse.SerializeToString,
            ),
            'SynthesizeSpeechStream': grpc.unary_stream_rpc_method_handler(
                    servicer.SynthesizeSpeechStream,
                    request_deserializer=voice_dot_v1_dot_voice__pb2.SynthesizeRequest.FromString,
                    response_serializer=voice_dot_v1_dot_voice__pb2.SynthesizeStreamResponse.SerializeToString,
            ),
            'DetectVoiceActivity': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectVoiceActivity,
                    request_deserializer=voice_dot_v1_dot_voice__pb2.VADRequest.FromString,
                    response_serializer=voice_dot_v1_dot_voice__pb2.VADResponse.SerializeToString,
            ),
            'DetectVoiceActivityStream': grpc.stream_stream_rpc_method_handler(
                    servicer.DetectVoiceActivityStream,
                    request_deserializer=voice_dot_v1_dot_voice__pb2.VADStreamRequest.FromString,
                    response_serializer=voice_dot_v1_dot_voice__pb2.VADStreamResponse.SerializeToString,
            ),
            'FullDuplexConversation': grpc.stream_stream_rpc_method_handler(
                    servicer.FullDuplexConversation,
                    request_deserializer=voice_dot_v1_dot_voice__pb2.FullDuplexRequest.FromString,
                    response_serializer=voice_dot_v1_dot_voice__pb2.FullDuplexResponse.SerializeToString,
            ),
            'CloneVoice': grpc.unary_unary_rpc_method_handler(
                    servicer.CloneVoice,
                    request_deserializer=voice_dot_v1_dot_voice__pb2.CloneVoiceRequest.FromString,
                    response_serializer=voice_dot_v1_dot_voice__pb2.CloneVoiceResponse.SerializeToString,
            ),
            'ListClonedVoices': grpc.unary_unary_rpc_method_handler(
                    servicer.ListClonedVoices,
                    request_deserializer=voice_dot_v1_dot_voice__pb2.ListClonedVoicesRequest.FromString,
                    response_serializer=voice_dot_v1_dot_voice__pb2.ListClonedVoicesResponse.SerializeToString,
            ),
            'DiarizeSpeakers': grpc.unary_unary_rpc_method_handler(
                    servicer.DiarizeSpeakers,
                    request_deserializer=voice_dot_v1_dot_voice__pb2.DiarizeRequest.FromString,
                    response_serializer=voice_dot_v1_dot_voice__pb2.DiarizeResponse.SerializeToString,
            ),
            'AnalyzeEmotion': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeEmotion,
                    request_deserializer=voice_dot_v1_dot_voice__pb2.EmotionRequest.FromString,
                    response_serializer=voice_dot_v1_dot_voice__pb2.EmotionResponse.SerializeToString,
            ),
            'ListVoices': grpc.unary_unary_rpc_method_handler(
                    servicer.ListVoices,
                    request_deserializer=voice_dot_v1_dot_voice__pb2.ListVoicesRequest.FromString,
                    response_serializer=voice_dot_v1_dot_voice__pb2.ListVoicesResponse.SerializeToString,
            ),
            'ListLanguages': grpc.unary_unary_rpc_method_handler(
                    servicer.ListLanguages,
                    request_deserializer=voice_dot_v1_dot_voice__pb2.ListLanguagesRequest.FromString,
                    response_serializer=voice_dot_v1_dot_voice__pb2.ListLanguagesResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=voice_dot_v1_dot_voice__pb2.HealthCheckRequest.FromString,
                    response_serializer=voice_dot_v1_dot_voice__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'voice.v1.VoiceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('voice.v1.VoiceService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class VoiceService(object):
    """VoiceService 语音服务（ASR + TTS + VAD）
    """

    @staticmethod
    def RecognizeSpeech(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/voice.v1.VoiceService/RecognizeSpeech',
            voice_dot_v1_dot_voice__pb2.RecognizeRequest.SerializeToString,
            voice_dot_v1_dot_voice__pb2.RecognizeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RecognizeSpeechStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/voice.v1.VoiceService/RecognizeSpeechStream',
            voice_dot_v1_dot_voice__pb2.RecognizeStreamRequest.SerializeToString,
            voice_dot_v1_dot_voice__pb2.RecognizeStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SynthesizeSpeech(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/voice.v1.VoiceService/SynthesizeSpeech',
            voice_dot_v1_dot_voice__pb2.SynthesizeRequest.SerializeToString,
            voice_dot_v1_dot_voice__pb2.SynthesizeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SynthesizeSpeechStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/voice.v1.VoiceService/SynthesizeSpeechStream',
            voice_dot_v1_dot_voice__pb2.SynthesizeRequest.SerializeToString,
            voice_dot_v1_dot_voice__pb2.SynthesizeStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DetectVoiceActivity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/voice.v1.VoiceService/DetectVoiceActivity',
            voice_dot_v1_dot_voice__pb2.VADRequest.SerializeToString,
            voice_dot_v1_dot_voice__pb2.VADResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DetectVoiceActivityStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/voice.v1.VoiceService/DetectVoiceActivityStream',
            voice_dot_v1_dot_voice__pb2.VADStreamRequest.SerializeToString,
            voice_dot_v1_dot_voice__pb2.VADStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FullDuplexConversation(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/voice.v1.VoiceService/FullDuplexConversation',
            voice_dot_v1_dot_voice__pb2.FullDuplexRequest.SerializeToString,
            voice_dot_v1_dot_voice__pb2.FullDuplexResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CloneVoice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/voice.v1.VoiceService/CloneVoice',
            voice_dot_v1_dot_voice__pb2.CloneVoiceRequest.SerializeToString,
            voice_dot_v1_dot_voice__pb2.CloneVoiceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListClonedVoices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/voice.v1.VoiceService/ListClonedVoices',
            voice_dot_v1_dot_voice__pb2.ListClonedVoicesRequest.SerializeToString,
            voice_dot_v1_dot_voice__pb2.ListClonedVoicesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DiarizeSpeakers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/voice.v1.VoiceService/DiarizeSpeakers',
            voice_dot_v1_dot_voice__pb2.DiarizeRequest.SerializeToString,
            voice_dot_v1_dot_voice__pb2.DiarizeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AnalyzeEmotion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/voice.v1.VoiceService/AnalyzeEmotion',
            voice_dot_v1_dot_voice__pb2.EmotionRequest.SerializeToString,
            voice_dot_v1_dot_voice__pb2.EmotionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListVoices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/voice.v1.VoiceService/ListVoices',
            voice_dot_v1_dot_voice__pb2.ListVoicesRequest.SerializeToString,
            voice_dot_v1_dot_voice__pb2.ListVoicesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListLanguages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/voice.v1.VoiceService/ListLanguages',
            voice_dot_v1_dot_voice__pb2.ListLanguagesRequest.SerializeToString,
            voice_dot_v1_dot_voice__pb2.ListLanguagesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/voice.v1.VoiceService/HealthCheck',
            voice_dot_v1_dot_voice__pb2.HealthCheckRequest.SerializeToString,
            voice_dot_v1_dot_voice__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
