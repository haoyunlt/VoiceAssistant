# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from agent.v1 import agent_pb2 as agent_dot_v1_dot_agent__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in agent/v1/agent_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AgentServiceStub(object):
    """AgentService Agent执行服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Execute = channel.unary_unary(
                '/agent.v1.AgentService/Execute',
                request_serializer=agent_dot_v1_dot_agent__pb2.ExecuteRequest.SerializeToString,
                response_deserializer=agent_dot_v1_dot_agent__pb2.ExecuteResponse.FromString,
                _registered_method=True)
        self.ExecuteStream = channel.unary_stream(
                '/agent.v1.AgentService/ExecuteStream',
                request_serializer=agent_dot_v1_dot_agent__pb2.ExecuteRequest.SerializeToString,
                response_deserializer=agent_dot_v1_dot_agent__pb2.ExecuteStreamResponse.FromString,
                _registered_method=True)
        self.ExecuteAsync = channel.unary_unary(
                '/agent.v1.AgentService/ExecuteAsync',
                request_serializer=agent_dot_v1_dot_agent__pb2.ExecuteRequest.SerializeToString,
                response_deserializer=agent_dot_v1_dot_agent__pb2.ExecuteAsyncResponse.FromString,
                _registered_method=True)
        self.GetTaskStatus = channel.unary_unary(
                '/agent.v1.AgentService/GetTaskStatus',
                request_serializer=agent_dot_v1_dot_agent__pb2.GetTaskStatusRequest.SerializeToString,
                response_deserializer=agent_dot_v1_dot_agent__pb2.TaskStatus.FromString,
                _registered_method=True)
        self.CancelTask = channel.unary_unary(
                '/agent.v1.AgentService/CancelTask',
                request_serializer=agent_dot_v1_dot_agent__pb2.CancelTaskRequest.SerializeToString,
                response_deserializer=agent_dot_v1_dot_agent__pb2.CancelTaskResponse.FromString,
                _registered_method=True)
        self.ExecuteLangGraph = channel.unary_unary(
                '/agent.v1.AgentService/ExecuteLangGraph',
                request_serializer=agent_dot_v1_dot_agent__pb2.LangGraphExecuteRequest.SerializeToString,
                response_deserializer=agent_dot_v1_dot_agent__pb2.LangGraphExecuteResponse.FromString,
                _registered_method=True)
        self.ListTools = channel.unary_unary(
                '/agent.v1.AgentService/ListTools',
                request_serializer=agent_dot_v1_dot_agent__pb2.ListToolsRequest.SerializeToString,
                response_deserializer=agent_dot_v1_dot_agent__pb2.ListToolsResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/agent.v1.AgentService/HealthCheck',
                request_serializer=agent_dot_v1_dot_agent__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=agent_dot_v1_dot_agent__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class AgentServiceServicer(object):
    """AgentService Agent执行服务
    """

    def Execute(self, request, context):
        """执行Agent任务（同步）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteStream(self, request, context):
        """执行Agent任务（流式）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteAsync(self, request, context):
        """异步执行Agent任务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskStatus(self, request, context):
        """获取任务状态
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelTask(self, request, context):
        """取消任务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteLangGraph(self, request, context):
        """LangGraph执行
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTools(self, request, context):
        """列出可用工具
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """健康检查
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Execute': grpc.unary_unary_rpc_method_handler(
                    servicer.Execute,
                    request_deserializer=agent_dot_v1_dot_agent__pb2.ExecuteRequest.FromString,
                    response_serializer=agent_dot_v1_dot_agent__pb2.ExecuteResponse.SerializeToString,
            ),
            'ExecuteStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ExecuteStream,
                    request_deserializer=agent_dot_v1_dot_agent__pb2.ExecuteRequest.FromString,
                    response_serializer=agent_dot_v1_dot_agent__pb2.ExecuteStreamResponse.SerializeToString,
            ),
            'ExecuteAsync': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteAsync,
                    request_deserializer=agent_dot_v1_dot_agent__pb2.ExecuteRequest.FromString,
                    response_serializer=agent_dot_v1_dot_agent__pb2.ExecuteAsyncResponse.SerializeToString,
            ),
            'GetTaskStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskStatus,
                    request_deserializer=agent_dot_v1_dot_agent__pb2.GetTaskStatusRequest.FromString,
                    response_serializer=agent_dot_v1_dot_agent__pb2.TaskStatus.SerializeToString,
            ),
            'CancelTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelTask,
                    request_deserializer=agent_dot_v1_dot_agent__pb2.CancelTaskRequest.FromString,
                    response_serializer=agent_dot_v1_dot_agent__pb2.CancelTaskResponse.SerializeToString,
            ),
            'ExecuteLangGraph': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteLangGraph,
                    request_deserializer=agent_dot_v1_dot_agent__pb2.LangGraphExecuteRequest.FromString,
                    response_serializer=agent_dot_v1_dot_agent__pb2.LangGraphExecuteResponse.SerializeToString,
            ),
            'ListTools': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTools,
                    request_deserializer=agent_dot_v1_dot_agent__pb2.ListToolsRequest.FromString,
                    response_serializer=agent_dot_v1_dot_agent__pb2.ListToolsResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=agent_dot_v1_dot_agent__pb2.HealthCheckRequest.FromString,
                    response_serializer=agent_dot_v1_dot_agent__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'agent.v1.AgentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('agent.v1.AgentService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AgentService(object):
    """AgentService Agent执行服务
    """

    @staticmethod
    def Execute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.v1.AgentService/Execute',
            agent_dot_v1_dot_agent__pb2.ExecuteRequest.SerializeToString,
            agent_dot_v1_dot_agent__pb2.ExecuteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/agent.v1.AgentService/ExecuteStream',
            agent_dot_v1_dot_agent__pb2.ExecuteRequest.SerializeToString,
            agent_dot_v1_dot_agent__pb2.ExecuteStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteAsync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.v1.AgentService/ExecuteAsync',
            agent_dot_v1_dot_agent__pb2.ExecuteRequest.SerializeToString,
            agent_dot_v1_dot_agent__pb2.ExecuteAsyncResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTaskStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.v1.AgentService/GetTaskStatus',
            agent_dot_v1_dot_agent__pb2.GetTaskStatusRequest.SerializeToString,
            agent_dot_v1_dot_agent__pb2.TaskStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.v1.AgentService/CancelTask',
            agent_dot_v1_dot_agent__pb2.CancelTaskRequest.SerializeToString,
            agent_dot_v1_dot_agent__pb2.CancelTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteLangGraph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.v1.AgentService/ExecuteLangGraph',
            agent_dot_v1_dot_agent__pb2.LangGraphExecuteRequest.SerializeToString,
            agent_dot_v1_dot_agent__pb2.LangGraphExecuteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListTools(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.v1.AgentService/ListTools',
            agent_dot_v1_dot_agent__pb2.ListToolsRequest.SerializeToString,
            agent_dot_v1_dot_agent__pb2.ListToolsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.v1.AgentService/HealthCheck',
            agent_dot_v1_dot_agent__pb2.HealthCheckRequest.SerializeToString,
            agent_dot_v1_dot_agent__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
