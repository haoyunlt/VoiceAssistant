# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from retrieval.v1 import retrieval_pb2 as retrieval_dot_v1_dot_retrieval__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in retrieval/v1/retrieval_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class RetrievalServiceStub(object):
    """RetrievalService 检索服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.VectorSearch = channel.unary_unary(
                '/retrieval.v1.RetrievalService/VectorSearch',
                request_serializer=retrieval_dot_v1_dot_retrieval__pb2.VectorSearchRequest.SerializeToString,
                response_deserializer=retrieval_dot_v1_dot_retrieval__pb2.VectorSearchResponse.FromString,
                _registered_method=True)
        self.BM25Search = channel.unary_unary(
                '/retrieval.v1.RetrievalService/BM25Search',
                request_serializer=retrieval_dot_v1_dot_retrieval__pb2.BM25SearchRequest.SerializeToString,
                response_deserializer=retrieval_dot_v1_dot_retrieval__pb2.BM25SearchResponse.FromString,
                _registered_method=True)
        self.HybridSearch = channel.unary_unary(
                '/retrieval.v1.RetrievalService/HybridSearch',
                request_serializer=retrieval_dot_v1_dot_retrieval__pb2.HybridSearchRequest.SerializeToString,
                response_deserializer=retrieval_dot_v1_dot_retrieval__pb2.HybridSearchResponse.FromString,
                _registered_method=True)
        self.GraphSearch = channel.unary_unary(
                '/retrieval.v1.RetrievalService/GraphSearch',
                request_serializer=retrieval_dot_v1_dot_retrieval__pb2.GraphSearchRequest.SerializeToString,
                response_deserializer=retrieval_dot_v1_dot_retrieval__pb2.GraphSearchResponse.FromString,
                _registered_method=True)
        self.HybridGraphSearch = channel.unary_unary(
                '/retrieval.v1.RetrievalService/HybridGraphSearch',
                request_serializer=retrieval_dot_v1_dot_retrieval__pb2.HybridGraphSearchRequest.SerializeToString,
                response_deserializer=retrieval_dot_v1_dot_retrieval__pb2.HybridGraphSearchResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/retrieval.v1.RetrievalService/HealthCheck',
                request_serializer=retrieval_dot_v1_dot_retrieval__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=retrieval_dot_v1_dot_retrieval__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class RetrievalServiceServicer(object):
    """RetrievalService 检索服务
    """

    def VectorSearch(self, request, context):
        """向量检索
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BM25Search(self, request, context):
        """BM25检索
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HybridSearch(self, request, context):
        """混合检索（向量 + BM25 + RRF融合 + 重排序）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GraphSearch(self, request, context):
        """图谱检索
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HybridGraphSearch(self, request, context):
        """混合图谱检索（三路并行: Vector + BM25 + Graph）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """健康检查
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RetrievalServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'VectorSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.VectorSearch,
                    request_deserializer=retrieval_dot_v1_dot_retrieval__pb2.VectorSearchRequest.FromString,
                    response_serializer=retrieval_dot_v1_dot_retrieval__pb2.VectorSearchResponse.SerializeToString,
            ),
            'BM25Search': grpc.unary_unary_rpc_method_handler(
                    servicer.BM25Search,
                    request_deserializer=retrieval_dot_v1_dot_retrieval__pb2.BM25SearchRequest.FromString,
                    response_serializer=retrieval_dot_v1_dot_retrieval__pb2.BM25SearchResponse.SerializeToString,
            ),
            'HybridSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.HybridSearch,
                    request_deserializer=retrieval_dot_v1_dot_retrieval__pb2.HybridSearchRequest.FromString,
                    response_serializer=retrieval_dot_v1_dot_retrieval__pb2.HybridSearchResponse.SerializeToString,
            ),
            'GraphSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.GraphSearch,
                    request_deserializer=retrieval_dot_v1_dot_retrieval__pb2.GraphSearchRequest.FromString,
                    response_serializer=retrieval_dot_v1_dot_retrieval__pb2.GraphSearchResponse.SerializeToString,
            ),
            'HybridGraphSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.HybridGraphSearch,
                    request_deserializer=retrieval_dot_v1_dot_retrieval__pb2.HybridGraphSearchRequest.FromString,
                    response_serializer=retrieval_dot_v1_dot_retrieval__pb2.HybridGraphSearchResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=retrieval_dot_v1_dot_retrieval__pb2.HealthCheckRequest.FromString,
                    response_serializer=retrieval_dot_v1_dot_retrieval__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'retrieval.v1.RetrievalService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('retrieval.v1.RetrievalService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RetrievalService(object):
    """RetrievalService 检索服务
    """

    @staticmethod
    def VectorSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/retrieval.v1.RetrievalService/VectorSearch',
            retrieval_dot_v1_dot_retrieval__pb2.VectorSearchRequest.SerializeToString,
            retrieval_dot_v1_dot_retrieval__pb2.VectorSearchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BM25Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/retrieval.v1.RetrievalService/BM25Search',
            retrieval_dot_v1_dot_retrieval__pb2.BM25SearchRequest.SerializeToString,
            retrieval_dot_v1_dot_retrieval__pb2.BM25SearchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HybridSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/retrieval.v1.RetrievalService/HybridSearch',
            retrieval_dot_v1_dot_retrieval__pb2.HybridSearchRequest.SerializeToString,
            retrieval_dot_v1_dot_retrieval__pb2.HybridSearchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GraphSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/retrieval.v1.RetrievalService/GraphSearch',
            retrieval_dot_v1_dot_retrieval__pb2.GraphSearchRequest.SerializeToString,
            retrieval_dot_v1_dot_retrieval__pb2.GraphSearchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HybridGraphSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/retrieval.v1.RetrievalService/HybridGraphSearch',
            retrieval_dot_v1_dot_retrieval__pb2.HybridGraphSearchRequest.SerializeToString,
            retrieval_dot_v1_dot_retrieval__pb2.HybridGraphSearchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/retrieval.v1.RetrievalService/HealthCheck',
            retrieval_dot_v1_dot_retrieval__pb2.HealthCheckRequest.SerializeToString,
            retrieval_dot_v1_dot_retrieval__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
