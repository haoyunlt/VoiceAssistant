// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: retrieval/v1/retrieval.proto

package retrievalv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RetrievalService_VectorSearch_FullMethodName      = "/retrieval.v1.RetrievalService/VectorSearch"
	RetrievalService_BM25Search_FullMethodName        = "/retrieval.v1.RetrievalService/BM25Search"
	RetrievalService_HybridSearch_FullMethodName      = "/retrieval.v1.RetrievalService/HybridSearch"
	RetrievalService_GraphSearch_FullMethodName       = "/retrieval.v1.RetrievalService/GraphSearch"
	RetrievalService_HybridGraphSearch_FullMethodName = "/retrieval.v1.RetrievalService/HybridGraphSearch"
	RetrievalService_HealthCheck_FullMethodName       = "/retrieval.v1.RetrievalService/HealthCheck"
)

// RetrievalServiceClient is the client API for RetrievalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RetrievalService 检索服务
type RetrievalServiceClient interface {
	// 向量检索
	VectorSearch(ctx context.Context, in *VectorSearchRequest, opts ...grpc.CallOption) (*VectorSearchResponse, error)
	// BM25检索
	BM25Search(ctx context.Context, in *BM25SearchRequest, opts ...grpc.CallOption) (*BM25SearchResponse, error)
	// 混合检索（向量 + BM25 + RRF融合 + 重排序）
	HybridSearch(ctx context.Context, in *HybridSearchRequest, opts ...grpc.CallOption) (*HybridSearchResponse, error)
	// 图谱检索
	GraphSearch(ctx context.Context, in *GraphSearchRequest, opts ...grpc.CallOption) (*GraphSearchResponse, error)
	// 混合图谱检索（三路并行: Vector + BM25 + Graph）
	HybridGraphSearch(ctx context.Context, in *HybridGraphSearchRequest, opts ...grpc.CallOption) (*HybridGraphSearchResponse, error)
	// 健康检查
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type retrievalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRetrievalServiceClient(cc grpc.ClientConnInterface) RetrievalServiceClient {
	return &retrievalServiceClient{cc}
}

func (c *retrievalServiceClient) VectorSearch(ctx context.Context, in *VectorSearchRequest, opts ...grpc.CallOption) (*VectorSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VectorSearchResponse)
	err := c.cc.Invoke(ctx, RetrievalService_VectorSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retrievalServiceClient) BM25Search(ctx context.Context, in *BM25SearchRequest, opts ...grpc.CallOption) (*BM25SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BM25SearchResponse)
	err := c.cc.Invoke(ctx, RetrievalService_BM25Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retrievalServiceClient) HybridSearch(ctx context.Context, in *HybridSearchRequest, opts ...grpc.CallOption) (*HybridSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HybridSearchResponse)
	err := c.cc.Invoke(ctx, RetrievalService_HybridSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retrievalServiceClient) GraphSearch(ctx context.Context, in *GraphSearchRequest, opts ...grpc.CallOption) (*GraphSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GraphSearchResponse)
	err := c.cc.Invoke(ctx, RetrievalService_GraphSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retrievalServiceClient) HybridGraphSearch(ctx context.Context, in *HybridGraphSearchRequest, opts ...grpc.CallOption) (*HybridGraphSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HybridGraphSearchResponse)
	err := c.cc.Invoke(ctx, RetrievalService_HybridGraphSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retrievalServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, RetrievalService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RetrievalServiceServer is the server API for RetrievalService service.
// All implementations must embed UnimplementedRetrievalServiceServer
// for forward compatibility.
//
// RetrievalService 检索服务
type RetrievalServiceServer interface {
	// 向量检索
	VectorSearch(context.Context, *VectorSearchRequest) (*VectorSearchResponse, error)
	// BM25检索
	BM25Search(context.Context, *BM25SearchRequest) (*BM25SearchResponse, error)
	// 混合检索（向量 + BM25 + RRF融合 + 重排序）
	HybridSearch(context.Context, *HybridSearchRequest) (*HybridSearchResponse, error)
	// 图谱检索
	GraphSearch(context.Context, *GraphSearchRequest) (*GraphSearchResponse, error)
	// 混合图谱检索（三路并行: Vector + BM25 + Graph）
	HybridGraphSearch(context.Context, *HybridGraphSearchRequest) (*HybridGraphSearchResponse, error)
	// 健康检查
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedRetrievalServiceServer()
}

// UnimplementedRetrievalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRetrievalServiceServer struct{}

func (UnimplementedRetrievalServiceServer) VectorSearch(context.Context, *VectorSearchRequest) (*VectorSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VectorSearch not implemented")
}
func (UnimplementedRetrievalServiceServer) BM25Search(context.Context, *BM25SearchRequest) (*BM25SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BM25Search not implemented")
}
func (UnimplementedRetrievalServiceServer) HybridSearch(context.Context, *HybridSearchRequest) (*HybridSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HybridSearch not implemented")
}
func (UnimplementedRetrievalServiceServer) GraphSearch(context.Context, *GraphSearchRequest) (*GraphSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GraphSearch not implemented")
}
func (UnimplementedRetrievalServiceServer) HybridGraphSearch(context.Context, *HybridGraphSearchRequest) (*HybridGraphSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HybridGraphSearch not implemented")
}
func (UnimplementedRetrievalServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedRetrievalServiceServer) mustEmbedUnimplementedRetrievalServiceServer() {}
func (UnimplementedRetrievalServiceServer) testEmbeddedByValue()                          {}

// UnsafeRetrievalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RetrievalServiceServer will
// result in compilation errors.
type UnsafeRetrievalServiceServer interface {
	mustEmbedUnimplementedRetrievalServiceServer()
}

func RegisterRetrievalServiceServer(s grpc.ServiceRegistrar, srv RetrievalServiceServer) {
	// If the following call pancis, it indicates UnimplementedRetrievalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RetrievalService_ServiceDesc, srv)
}

func _RetrievalService_VectorSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VectorSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrievalServiceServer).VectorSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RetrievalService_VectorSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrievalServiceServer).VectorSearch(ctx, req.(*VectorSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RetrievalService_BM25Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BM25SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrievalServiceServer).BM25Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RetrievalService_BM25Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrievalServiceServer).BM25Search(ctx, req.(*BM25SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RetrievalService_HybridSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HybridSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrievalServiceServer).HybridSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RetrievalService_HybridSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrievalServiceServer).HybridSearch(ctx, req.(*HybridSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RetrievalService_GraphSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrievalServiceServer).GraphSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RetrievalService_GraphSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrievalServiceServer).GraphSearch(ctx, req.(*GraphSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RetrievalService_HybridGraphSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HybridGraphSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrievalServiceServer).HybridGraphSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RetrievalService_HybridGraphSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrievalServiceServer).HybridGraphSearch(ctx, req.(*HybridGraphSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RetrievalService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrievalServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RetrievalService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrievalServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RetrievalService_ServiceDesc is the grpc.ServiceDesc for RetrievalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RetrievalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "retrieval.v1.RetrievalService",
	HandlerType: (*RetrievalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VectorSearch",
			Handler:    _RetrievalService_VectorSearch_Handler,
		},
		{
			MethodName: "BM25Search",
			Handler:    _RetrievalService_BM25Search_Handler,
		},
		{
			MethodName: "HybridSearch",
			Handler:    _RetrievalService_HybridSearch_Handler,
		},
		{
			MethodName: "GraphSearch",
			Handler:    _RetrievalService_GraphSearch_Handler,
		},
		{
			MethodName: "HybridGraphSearch",
			Handler:    _RetrievalService_HybridGraphSearch_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _RetrievalService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "retrieval/v1/retrieval.proto",
}
