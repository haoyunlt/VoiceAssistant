// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: voice/v1/voice.proto

package voicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VoiceService_RecognizeSpeech_FullMethodName           = "/voice.v1.VoiceService/RecognizeSpeech"
	VoiceService_RecognizeSpeechStream_FullMethodName     = "/voice.v1.VoiceService/RecognizeSpeechStream"
	VoiceService_SynthesizeSpeech_FullMethodName          = "/voice.v1.VoiceService/SynthesizeSpeech"
	VoiceService_SynthesizeSpeechStream_FullMethodName    = "/voice.v1.VoiceService/SynthesizeSpeechStream"
	VoiceService_DetectVoiceActivity_FullMethodName       = "/voice.v1.VoiceService/DetectVoiceActivity"
	VoiceService_DetectVoiceActivityStream_FullMethodName = "/voice.v1.VoiceService/DetectVoiceActivityStream"
	VoiceService_FullDuplexConversation_FullMethodName    = "/voice.v1.VoiceService/FullDuplexConversation"
	VoiceService_CloneVoice_FullMethodName                = "/voice.v1.VoiceService/CloneVoice"
	VoiceService_ListClonedVoices_FullMethodName          = "/voice.v1.VoiceService/ListClonedVoices"
	VoiceService_DiarizeSpeakers_FullMethodName           = "/voice.v1.VoiceService/DiarizeSpeakers"
	VoiceService_AnalyzeEmotion_FullMethodName            = "/voice.v1.VoiceService/AnalyzeEmotion"
	VoiceService_ListVoices_FullMethodName                = "/voice.v1.VoiceService/ListVoices"
	VoiceService_ListLanguages_FullMethodName             = "/voice.v1.VoiceService/ListLanguages"
	VoiceService_HealthCheck_FullMethodName               = "/voice.v1.VoiceService/HealthCheck"
)

// VoiceServiceClient is the client API for VoiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// VoiceService 语音服务（ASR + TTS + VAD）
type VoiceServiceClient interface {
	// ========== ASR（语音识别）==========
	// 批量识别
	RecognizeSpeech(ctx context.Context, in *RecognizeRequest, opts ...grpc.CallOption) (*RecognizeResponse, error)
	// 流式识别
	RecognizeSpeechStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RecognizeStreamRequest, RecognizeStreamResponse], error)
	// ========== TTS（语音合成）==========
	// 批量合成
	SynthesizeSpeech(ctx context.Context, in *SynthesizeRequest, opts ...grpc.CallOption) (*SynthesizeResponse, error)
	// 流式合成
	SynthesizeSpeechStream(ctx context.Context, in *SynthesizeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SynthesizeStreamResponse], error)
	// ========== VAD（语音活动检测）==========
	// 批量检测
	DetectVoiceActivity(ctx context.Context, in *VADRequest, opts ...grpc.CallOption) (*VADResponse, error)
	// 流式检测
	DetectVoiceActivityStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[VADStreamRequest, VADStreamResponse], error)
	// ========== 全双工 ==========
	// 全双工对话
	FullDuplexConversation(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FullDuplexRequest, FullDuplexResponse], error)
	// ========== 语音克隆 ==========
	// 克隆音色
	CloneVoice(ctx context.Context, in *CloneVoiceRequest, opts ...grpc.CallOption) (*CloneVoiceResponse, error)
	// 列出克隆的音色
	ListClonedVoices(ctx context.Context, in *ListClonedVoicesRequest, opts ...grpc.CallOption) (*ListClonedVoicesResponse, error)
	// ========== 说话人分离 ==========
	// 说话人分离
	DiarizeSpeakers(ctx context.Context, in *DiarizeRequest, opts ...grpc.CallOption) (*DiarizeResponse, error)
	// ========== 情感分析 ==========
	// 语音情感分析
	AnalyzeEmotion(ctx context.Context, in *EmotionRequest, opts ...grpc.CallOption) (*EmotionResponse, error)
	// ========== 工具相关 ==========
	// 列出可用音色
	ListVoices(ctx context.Context, in *ListVoicesRequest, opts ...grpc.CallOption) (*ListVoicesResponse, error)
	// 列出支持的语言
	ListLanguages(ctx context.Context, in *ListLanguagesRequest, opts ...grpc.CallOption) (*ListLanguagesResponse, error)
	// 健康检查
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type voiceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVoiceServiceClient(cc grpc.ClientConnInterface) VoiceServiceClient {
	return &voiceServiceClient{cc}
}

func (c *voiceServiceClient) RecognizeSpeech(ctx context.Context, in *RecognizeRequest, opts ...grpc.CallOption) (*RecognizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecognizeResponse)
	err := c.cc.Invoke(ctx, VoiceService_RecognizeSpeech_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceServiceClient) RecognizeSpeechStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RecognizeStreamRequest, RecognizeStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VoiceService_ServiceDesc.Streams[0], VoiceService_RecognizeSpeechStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RecognizeStreamRequest, RecognizeStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VoiceService_RecognizeSpeechStreamClient = grpc.BidiStreamingClient[RecognizeStreamRequest, RecognizeStreamResponse]

func (c *voiceServiceClient) SynthesizeSpeech(ctx context.Context, in *SynthesizeRequest, opts ...grpc.CallOption) (*SynthesizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SynthesizeResponse)
	err := c.cc.Invoke(ctx, VoiceService_SynthesizeSpeech_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceServiceClient) SynthesizeSpeechStream(ctx context.Context, in *SynthesizeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SynthesizeStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VoiceService_ServiceDesc.Streams[1], VoiceService_SynthesizeSpeechStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SynthesizeRequest, SynthesizeStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VoiceService_SynthesizeSpeechStreamClient = grpc.ServerStreamingClient[SynthesizeStreamResponse]

func (c *voiceServiceClient) DetectVoiceActivity(ctx context.Context, in *VADRequest, opts ...grpc.CallOption) (*VADResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VADResponse)
	err := c.cc.Invoke(ctx, VoiceService_DetectVoiceActivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceServiceClient) DetectVoiceActivityStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[VADStreamRequest, VADStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VoiceService_ServiceDesc.Streams[2], VoiceService_DetectVoiceActivityStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[VADStreamRequest, VADStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VoiceService_DetectVoiceActivityStreamClient = grpc.BidiStreamingClient[VADStreamRequest, VADStreamResponse]

func (c *voiceServiceClient) FullDuplexConversation(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FullDuplexRequest, FullDuplexResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VoiceService_ServiceDesc.Streams[3], VoiceService_FullDuplexConversation_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FullDuplexRequest, FullDuplexResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VoiceService_FullDuplexConversationClient = grpc.BidiStreamingClient[FullDuplexRequest, FullDuplexResponse]

func (c *voiceServiceClient) CloneVoice(ctx context.Context, in *CloneVoiceRequest, opts ...grpc.CallOption) (*CloneVoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloneVoiceResponse)
	err := c.cc.Invoke(ctx, VoiceService_CloneVoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceServiceClient) ListClonedVoices(ctx context.Context, in *ListClonedVoicesRequest, opts ...grpc.CallOption) (*ListClonedVoicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClonedVoicesResponse)
	err := c.cc.Invoke(ctx, VoiceService_ListClonedVoices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceServiceClient) DiarizeSpeakers(ctx context.Context, in *DiarizeRequest, opts ...grpc.CallOption) (*DiarizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiarizeResponse)
	err := c.cc.Invoke(ctx, VoiceService_DiarizeSpeakers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceServiceClient) AnalyzeEmotion(ctx context.Context, in *EmotionRequest, opts ...grpc.CallOption) (*EmotionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmotionResponse)
	err := c.cc.Invoke(ctx, VoiceService_AnalyzeEmotion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceServiceClient) ListVoices(ctx context.Context, in *ListVoicesRequest, opts ...grpc.CallOption) (*ListVoicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVoicesResponse)
	err := c.cc.Invoke(ctx, VoiceService_ListVoices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceServiceClient) ListLanguages(ctx context.Context, in *ListLanguagesRequest, opts ...grpc.CallOption) (*ListLanguagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLanguagesResponse)
	err := c.cc.Invoke(ctx, VoiceService_ListLanguages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, VoiceService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoiceServiceServer is the server API for VoiceService service.
// All implementations must embed UnimplementedVoiceServiceServer
// for forward compatibility.
//
// VoiceService 语音服务（ASR + TTS + VAD）
type VoiceServiceServer interface {
	// ========== ASR（语音识别）==========
	// 批量识别
	RecognizeSpeech(context.Context, *RecognizeRequest) (*RecognizeResponse, error)
	// 流式识别
	RecognizeSpeechStream(grpc.BidiStreamingServer[RecognizeStreamRequest, RecognizeStreamResponse]) error
	// ========== TTS（语音合成）==========
	// 批量合成
	SynthesizeSpeech(context.Context, *SynthesizeRequest) (*SynthesizeResponse, error)
	// 流式合成
	SynthesizeSpeechStream(*SynthesizeRequest, grpc.ServerStreamingServer[SynthesizeStreamResponse]) error
	// ========== VAD（语音活动检测）==========
	// 批量检测
	DetectVoiceActivity(context.Context, *VADRequest) (*VADResponse, error)
	// 流式检测
	DetectVoiceActivityStream(grpc.BidiStreamingServer[VADStreamRequest, VADStreamResponse]) error
	// ========== 全双工 ==========
	// 全双工对话
	FullDuplexConversation(grpc.BidiStreamingServer[FullDuplexRequest, FullDuplexResponse]) error
	// ========== 语音克隆 ==========
	// 克隆音色
	CloneVoice(context.Context, *CloneVoiceRequest) (*CloneVoiceResponse, error)
	// 列出克隆的音色
	ListClonedVoices(context.Context, *ListClonedVoicesRequest) (*ListClonedVoicesResponse, error)
	// ========== 说话人分离 ==========
	// 说话人分离
	DiarizeSpeakers(context.Context, *DiarizeRequest) (*DiarizeResponse, error)
	// ========== 情感分析 ==========
	// 语音情感分析
	AnalyzeEmotion(context.Context, *EmotionRequest) (*EmotionResponse, error)
	// ========== 工具相关 ==========
	// 列出可用音色
	ListVoices(context.Context, *ListVoicesRequest) (*ListVoicesResponse, error)
	// 列出支持的语言
	ListLanguages(context.Context, *ListLanguagesRequest) (*ListLanguagesResponse, error)
	// 健康检查
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedVoiceServiceServer()
}

// UnimplementedVoiceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVoiceServiceServer struct{}

func (UnimplementedVoiceServiceServer) RecognizeSpeech(context.Context, *RecognizeRequest) (*RecognizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecognizeSpeech not implemented")
}
func (UnimplementedVoiceServiceServer) RecognizeSpeechStream(grpc.BidiStreamingServer[RecognizeStreamRequest, RecognizeStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method RecognizeSpeechStream not implemented")
}
func (UnimplementedVoiceServiceServer) SynthesizeSpeech(context.Context, *SynthesizeRequest) (*SynthesizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SynthesizeSpeech not implemented")
}
func (UnimplementedVoiceServiceServer) SynthesizeSpeechStream(*SynthesizeRequest, grpc.ServerStreamingServer[SynthesizeStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SynthesizeSpeechStream not implemented")
}
func (UnimplementedVoiceServiceServer) DetectVoiceActivity(context.Context, *VADRequest) (*VADResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetectVoiceActivity not implemented")
}
func (UnimplementedVoiceServiceServer) DetectVoiceActivityStream(grpc.BidiStreamingServer[VADStreamRequest, VADStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DetectVoiceActivityStream not implemented")
}
func (UnimplementedVoiceServiceServer) FullDuplexConversation(grpc.BidiStreamingServer[FullDuplexRequest, FullDuplexResponse]) error {
	return status.Errorf(codes.Unimplemented, "method FullDuplexConversation not implemented")
}
func (UnimplementedVoiceServiceServer) CloneVoice(context.Context, *CloneVoiceRequest) (*CloneVoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneVoice not implemented")
}
func (UnimplementedVoiceServiceServer) ListClonedVoices(context.Context, *ListClonedVoicesRequest) (*ListClonedVoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClonedVoices not implemented")
}
func (UnimplementedVoiceServiceServer) DiarizeSpeakers(context.Context, *DiarizeRequest) (*DiarizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiarizeSpeakers not implemented")
}
func (UnimplementedVoiceServiceServer) AnalyzeEmotion(context.Context, *EmotionRequest) (*EmotionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeEmotion not implemented")
}
func (UnimplementedVoiceServiceServer) ListVoices(context.Context, *ListVoicesRequest) (*ListVoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVoices not implemented")
}
func (UnimplementedVoiceServiceServer) ListLanguages(context.Context, *ListLanguagesRequest) (*ListLanguagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLanguages not implemented")
}
func (UnimplementedVoiceServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedVoiceServiceServer) mustEmbedUnimplementedVoiceServiceServer() {}
func (UnimplementedVoiceServiceServer) testEmbeddedByValue()                      {}

// UnsafeVoiceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoiceServiceServer will
// result in compilation errors.
type UnsafeVoiceServiceServer interface {
	mustEmbedUnimplementedVoiceServiceServer()
}

func RegisterVoiceServiceServer(s grpc.ServiceRegistrar, srv VoiceServiceServer) {
	// If the following call pancis, it indicates UnimplementedVoiceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VoiceService_ServiceDesc, srv)
}

func _VoiceService_RecognizeSpeech_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecognizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceServiceServer).RecognizeSpeech(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoiceService_RecognizeSpeech_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceServiceServer).RecognizeSpeech(ctx, req.(*RecognizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoiceService_RecognizeSpeechStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VoiceServiceServer).RecognizeSpeechStream(&grpc.GenericServerStream[RecognizeStreamRequest, RecognizeStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VoiceService_RecognizeSpeechStreamServer = grpc.BidiStreamingServer[RecognizeStreamRequest, RecognizeStreamResponse]

func _VoiceService_SynthesizeSpeech_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SynthesizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceServiceServer).SynthesizeSpeech(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoiceService_SynthesizeSpeech_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceServiceServer).SynthesizeSpeech(ctx, req.(*SynthesizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoiceService_SynthesizeSpeechStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SynthesizeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VoiceServiceServer).SynthesizeSpeechStream(m, &grpc.GenericServerStream[SynthesizeRequest, SynthesizeStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VoiceService_SynthesizeSpeechStreamServer = grpc.ServerStreamingServer[SynthesizeStreamResponse]

func _VoiceService_DetectVoiceActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VADRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceServiceServer).DetectVoiceActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoiceService_DetectVoiceActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceServiceServer).DetectVoiceActivity(ctx, req.(*VADRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoiceService_DetectVoiceActivityStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VoiceServiceServer).DetectVoiceActivityStream(&grpc.GenericServerStream[VADStreamRequest, VADStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VoiceService_DetectVoiceActivityStreamServer = grpc.BidiStreamingServer[VADStreamRequest, VADStreamResponse]

func _VoiceService_FullDuplexConversation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VoiceServiceServer).FullDuplexConversation(&grpc.GenericServerStream[FullDuplexRequest, FullDuplexResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VoiceService_FullDuplexConversationServer = grpc.BidiStreamingServer[FullDuplexRequest, FullDuplexResponse]

func _VoiceService_CloneVoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneVoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceServiceServer).CloneVoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoiceService_CloneVoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceServiceServer).CloneVoice(ctx, req.(*CloneVoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoiceService_ListClonedVoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClonedVoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceServiceServer).ListClonedVoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoiceService_ListClonedVoices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceServiceServer).ListClonedVoices(ctx, req.(*ListClonedVoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoiceService_DiarizeSpeakers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiarizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceServiceServer).DiarizeSpeakers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoiceService_DiarizeSpeakers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceServiceServer).DiarizeSpeakers(ctx, req.(*DiarizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoiceService_AnalyzeEmotion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmotionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceServiceServer).AnalyzeEmotion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoiceService_AnalyzeEmotion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceServiceServer).AnalyzeEmotion(ctx, req.(*EmotionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoiceService_ListVoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceServiceServer).ListVoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoiceService_ListVoices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceServiceServer).ListVoices(ctx, req.(*ListVoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoiceService_ListLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceServiceServer).ListLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoiceService_ListLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceServiceServer).ListLanguages(ctx, req.(*ListLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoiceService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoiceService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VoiceService_ServiceDesc is the grpc.ServiceDesc for VoiceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VoiceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "voice.v1.VoiceService",
	HandlerType: (*VoiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecognizeSpeech",
			Handler:    _VoiceService_RecognizeSpeech_Handler,
		},
		{
			MethodName: "SynthesizeSpeech",
			Handler:    _VoiceService_SynthesizeSpeech_Handler,
		},
		{
			MethodName: "DetectVoiceActivity",
			Handler:    _VoiceService_DetectVoiceActivity_Handler,
		},
		{
			MethodName: "CloneVoice",
			Handler:    _VoiceService_CloneVoice_Handler,
		},
		{
			MethodName: "ListClonedVoices",
			Handler:    _VoiceService_ListClonedVoices_Handler,
		},
		{
			MethodName: "DiarizeSpeakers",
			Handler:    _VoiceService_DiarizeSpeakers_Handler,
		},
		{
			MethodName: "AnalyzeEmotion",
			Handler:    _VoiceService_AnalyzeEmotion_Handler,
		},
		{
			MethodName: "ListVoices",
			Handler:    _VoiceService_ListVoices_Handler,
		},
		{
			MethodName: "ListLanguages",
			Handler:    _VoiceService_ListLanguages_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _VoiceService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecognizeSpeechStream",
			Handler:       _VoiceService_RecognizeSpeechStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SynthesizeSpeechStream",
			Handler:       _VoiceService_SynthesizeSpeechStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DetectVoiceActivityStream",
			Handler:       _VoiceService_DetectVoiceActivityStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "FullDuplexConversation",
			Handler:       _VoiceService_FullDuplexConversation_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "voice/v1/voice.proto",
}
