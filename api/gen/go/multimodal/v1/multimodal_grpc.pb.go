// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: multimodal/v1/multimodal.proto

package multimodalv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MultimodalService_AnalyzeImage_FullMethodName      = "/multimodal.v1.MultimodalService/AnalyzeImage"
	MultimodalService_ExtractText_FullMethodName       = "/multimodal.v1.MultimodalService/ExtractText"
	MultimodalService_DetectObjects_FullMethodName     = "/multimodal.v1.MultimodalService/DetectObjects"
	MultimodalService_RecognizeScene_FullMethodName    = "/multimodal.v1.MultimodalService/RecognizeScene"
	MultimodalService_DescribeImage_FullMethodName     = "/multimodal.v1.MultimodalService/DescribeImage"
	MultimodalService_AnalyzeColors_FullMethodName     = "/multimodal.v1.MultimodalService/AnalyzeColors"
	MultimodalService_ComputeSimilarity_FullMethodName = "/multimodal.v1.MultimodalService/ComputeSimilarity"
	MultimodalService_AnalyzeVideo_FullMethodName      = "/multimodal.v1.MultimodalService/AnalyzeVideo"
	MultimodalService_HealthCheck_FullMethodName       = "/multimodal.v1.MultimodalService/HealthCheck"
)

// MultimodalServiceClient is the client API for MultimodalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MultimodalService 多模态服务
type MultimodalServiceClient interface {
	// 图像分析
	AnalyzeImage(ctx context.Context, in *AnalyzeImageRequest, opts ...grpc.CallOption) (*AnalyzeImageResponse, error)
	// OCR文字识别
	ExtractText(ctx context.Context, in *ExtractTextRequest, opts ...grpc.CallOption) (*ExtractTextResponse, error)
	// 目标检测
	DetectObjects(ctx context.Context, in *DetectObjectsRequest, opts ...grpc.CallOption) (*DetectObjectsResponse, error)
	// 场景识别
	RecognizeScene(ctx context.Context, in *RecognizeSceneRequest, opts ...grpc.CallOption) (*RecognizeSceneResponse, error)
	// 图像描述
	DescribeImage(ctx context.Context, in *DescribeImageRequest, opts ...grpc.CallOption) (*DescribeImageResponse, error)
	// 颜色分析
	AnalyzeColors(ctx context.Context, in *AnalyzeColorsRequest, opts ...grpc.CallOption) (*AnalyzeColorsResponse, error)
	// 图像相似度
	ComputeSimilarity(ctx context.Context, in *ComputeSimilarityRequest, opts ...grpc.CallOption) (*ComputeSimilarityResponse, error)
	// 视频分析
	AnalyzeVideo(ctx context.Context, in *AnalyzeVideoRequest, opts ...grpc.CallOption) (*AnalyzeVideoResponse, error)
	// 健康检查
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type multimodalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMultimodalServiceClient(cc grpc.ClientConnInterface) MultimodalServiceClient {
	return &multimodalServiceClient{cc}
}

func (c *multimodalServiceClient) AnalyzeImage(ctx context.Context, in *AnalyzeImageRequest, opts ...grpc.CallOption) (*AnalyzeImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzeImageResponse)
	err := c.cc.Invoke(ctx, MultimodalService_AnalyzeImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multimodalServiceClient) ExtractText(ctx context.Context, in *ExtractTextRequest, opts ...grpc.CallOption) (*ExtractTextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExtractTextResponse)
	err := c.cc.Invoke(ctx, MultimodalService_ExtractText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multimodalServiceClient) DetectObjects(ctx context.Context, in *DetectObjectsRequest, opts ...grpc.CallOption) (*DetectObjectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetectObjectsResponse)
	err := c.cc.Invoke(ctx, MultimodalService_DetectObjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multimodalServiceClient) RecognizeScene(ctx context.Context, in *RecognizeSceneRequest, opts ...grpc.CallOption) (*RecognizeSceneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecognizeSceneResponse)
	err := c.cc.Invoke(ctx, MultimodalService_RecognizeScene_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multimodalServiceClient) DescribeImage(ctx context.Context, in *DescribeImageRequest, opts ...grpc.CallOption) (*DescribeImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeImageResponse)
	err := c.cc.Invoke(ctx, MultimodalService_DescribeImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multimodalServiceClient) AnalyzeColors(ctx context.Context, in *AnalyzeColorsRequest, opts ...grpc.CallOption) (*AnalyzeColorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzeColorsResponse)
	err := c.cc.Invoke(ctx, MultimodalService_AnalyzeColors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multimodalServiceClient) ComputeSimilarity(ctx context.Context, in *ComputeSimilarityRequest, opts ...grpc.CallOption) (*ComputeSimilarityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComputeSimilarityResponse)
	err := c.cc.Invoke(ctx, MultimodalService_ComputeSimilarity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multimodalServiceClient) AnalyzeVideo(ctx context.Context, in *AnalyzeVideoRequest, opts ...grpc.CallOption) (*AnalyzeVideoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzeVideoResponse)
	err := c.cc.Invoke(ctx, MultimodalService_AnalyzeVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multimodalServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, MultimodalService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultimodalServiceServer is the server API for MultimodalService service.
// All implementations must embed UnimplementedMultimodalServiceServer
// for forward compatibility.
//
// MultimodalService 多模态服务
type MultimodalServiceServer interface {
	// 图像分析
	AnalyzeImage(context.Context, *AnalyzeImageRequest) (*AnalyzeImageResponse, error)
	// OCR文字识别
	ExtractText(context.Context, *ExtractTextRequest) (*ExtractTextResponse, error)
	// 目标检测
	DetectObjects(context.Context, *DetectObjectsRequest) (*DetectObjectsResponse, error)
	// 场景识别
	RecognizeScene(context.Context, *RecognizeSceneRequest) (*RecognizeSceneResponse, error)
	// 图像描述
	DescribeImage(context.Context, *DescribeImageRequest) (*DescribeImageResponse, error)
	// 颜色分析
	AnalyzeColors(context.Context, *AnalyzeColorsRequest) (*AnalyzeColorsResponse, error)
	// 图像相似度
	ComputeSimilarity(context.Context, *ComputeSimilarityRequest) (*ComputeSimilarityResponse, error)
	// 视频分析
	AnalyzeVideo(context.Context, *AnalyzeVideoRequest) (*AnalyzeVideoResponse, error)
	// 健康检查
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedMultimodalServiceServer()
}

// UnimplementedMultimodalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMultimodalServiceServer struct{}

func (UnimplementedMultimodalServiceServer) AnalyzeImage(context.Context, *AnalyzeImageRequest) (*AnalyzeImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeImage not implemented")
}
func (UnimplementedMultimodalServiceServer) ExtractText(context.Context, *ExtractTextRequest) (*ExtractTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractText not implemented")
}
func (UnimplementedMultimodalServiceServer) DetectObjects(context.Context, *DetectObjectsRequest) (*DetectObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetectObjects not implemented")
}
func (UnimplementedMultimodalServiceServer) RecognizeScene(context.Context, *RecognizeSceneRequest) (*RecognizeSceneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecognizeScene not implemented")
}
func (UnimplementedMultimodalServiceServer) DescribeImage(context.Context, *DescribeImageRequest) (*DescribeImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeImage not implemented")
}
func (UnimplementedMultimodalServiceServer) AnalyzeColors(context.Context, *AnalyzeColorsRequest) (*AnalyzeColorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeColors not implemented")
}
func (UnimplementedMultimodalServiceServer) ComputeSimilarity(context.Context, *ComputeSimilarityRequest) (*ComputeSimilarityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeSimilarity not implemented")
}
func (UnimplementedMultimodalServiceServer) AnalyzeVideo(context.Context, *AnalyzeVideoRequest) (*AnalyzeVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeVideo not implemented")
}
func (UnimplementedMultimodalServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedMultimodalServiceServer) mustEmbedUnimplementedMultimodalServiceServer() {}
func (UnimplementedMultimodalServiceServer) testEmbeddedByValue()                           {}

// UnsafeMultimodalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultimodalServiceServer will
// result in compilation errors.
type UnsafeMultimodalServiceServer interface {
	mustEmbedUnimplementedMultimodalServiceServer()
}

func RegisterMultimodalServiceServer(s grpc.ServiceRegistrar, srv MultimodalServiceServer) {
	// If the following call pancis, it indicates UnimplementedMultimodalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MultimodalService_ServiceDesc, srv)
}

func _MultimodalService_AnalyzeImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultimodalServiceServer).AnalyzeImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultimodalService_AnalyzeImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultimodalServiceServer).AnalyzeImage(ctx, req.(*AnalyzeImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultimodalService_ExtractText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultimodalServiceServer).ExtractText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultimodalService_ExtractText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultimodalServiceServer).ExtractText(ctx, req.(*ExtractTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultimodalService_DetectObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultimodalServiceServer).DetectObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultimodalService_DetectObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultimodalServiceServer).DetectObjects(ctx, req.(*DetectObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultimodalService_RecognizeScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecognizeSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultimodalServiceServer).RecognizeScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultimodalService_RecognizeScene_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultimodalServiceServer).RecognizeScene(ctx, req.(*RecognizeSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultimodalService_DescribeImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultimodalServiceServer).DescribeImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultimodalService_DescribeImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultimodalServiceServer).DescribeImage(ctx, req.(*DescribeImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultimodalService_AnalyzeColors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeColorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultimodalServiceServer).AnalyzeColors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultimodalService_AnalyzeColors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultimodalServiceServer).AnalyzeColors(ctx, req.(*AnalyzeColorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultimodalService_ComputeSimilarity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeSimilarityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultimodalServiceServer).ComputeSimilarity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultimodalService_ComputeSimilarity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultimodalServiceServer).ComputeSimilarity(ctx, req.(*ComputeSimilarityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultimodalService_AnalyzeVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultimodalServiceServer).AnalyzeVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultimodalService_AnalyzeVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultimodalServiceServer).AnalyzeVideo(ctx, req.(*AnalyzeVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultimodalService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultimodalServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultimodalService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultimodalServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MultimodalService_ServiceDesc is the grpc.ServiceDesc for MultimodalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MultimodalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "multimodal.v1.MultimodalService",
	HandlerType: (*MultimodalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnalyzeImage",
			Handler:    _MultimodalService_AnalyzeImage_Handler,
		},
		{
			MethodName: "ExtractText",
			Handler:    _MultimodalService_ExtractText_Handler,
		},
		{
			MethodName: "DetectObjects",
			Handler:    _MultimodalService_DetectObjects_Handler,
		},
		{
			MethodName: "RecognizeScene",
			Handler:    _MultimodalService_RecognizeScene_Handler,
		},
		{
			MethodName: "DescribeImage",
			Handler:    _MultimodalService_DescribeImage_Handler,
		},
		{
			MethodName: "AnalyzeColors",
			Handler:    _MultimodalService_AnalyzeColors_Handler,
		},
		{
			MethodName: "ComputeSimilarity",
			Handler:    _MultimodalService_ComputeSimilarity_Handler,
		},
		{
			MethodName: "AnalyzeVideo",
			Handler:    _MultimodalService_AnalyzeVideo_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _MultimodalService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "multimodal/v1/multimodal.proto",
}
