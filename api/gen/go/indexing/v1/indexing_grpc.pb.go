// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: indexing/v1/indexing.proto

package indexingv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IndexingService_ProcessDocument_FullMethodName      = "/indexing.v1.IndexingService/ProcessDocument"
	IndexingService_ProcessDocumentBatch_FullMethodName = "/indexing.v1.IndexingService/ProcessDocumentBatch"
	IndexingService_IndexIncremental_FullMethodName     = "/indexing.v1.IndexingService/IndexIncremental"
	IndexingService_RebuildIndex_FullMethodName         = "/indexing.v1.IndexingService/RebuildIndex"
	IndexingService_GetProcessingStatus_FullMethodName  = "/indexing.v1.IndexingService/GetProcessingStatus"
	IndexingService_GetDocumentChunks_FullMethodName    = "/indexing.v1.IndexingService/GetDocumentChunks"
	IndexingService_DeleteDocumentIndex_FullMethodName  = "/indexing.v1.IndexingService/DeleteDocumentIndex"
	IndexingService_GetStats_FullMethodName             = "/indexing.v1.IndexingService/GetStats"
	IndexingService_HealthCheck_FullMethodName          = "/indexing.v1.IndexingService/HealthCheck"
	IndexingService_ReadinessCheck_FullMethodName       = "/indexing.v1.IndexingService/ReadinessCheck"
)

// IndexingServiceClient is the client API for IndexingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// IndexingService 索引服务
type IndexingServiceClient interface {
	// 文档处理
	ProcessDocument(ctx context.Context, in *ProcessDocumentRequest, opts ...grpc.CallOption) (*ProcessDocumentResponse, error)
	// 批量处理
	ProcessDocumentBatch(ctx context.Context, in *ProcessDocumentBatchRequest, opts ...grpc.CallOption) (*ProcessDocumentBatchResponse, error)
	// 增量索引
	IndexIncremental(ctx context.Context, in *IndexIncrementalRequest, opts ...grpc.CallOption) (*IndexIncrementalResponse, error)
	// 重建索引
	RebuildIndex(ctx context.Context, in *RebuildIndexRequest, opts ...grpc.CallOption) (*RebuildIndexResponse, error)
	// 获取处理状态
	GetProcessingStatus(ctx context.Context, in *GetProcessingStatusRequest, opts ...grpc.CallOption) (*ProcessingStatus, error)
	// 获取文档chunks
	GetDocumentChunks(ctx context.Context, in *GetDocumentChunksRequest, opts ...grpc.CallOption) (*GetDocumentChunksResponse, error)
	// 删除文档索引
	DeleteDocumentIndex(ctx context.Context, in *DeleteDocumentIndexRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取统计信息
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*StatsResponse, error)
	// 健康检查
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// 就绪检查
	ReadinessCheck(ctx context.Context, in *ReadinessCheckRequest, opts ...grpc.CallOption) (*ReadinessCheckResponse, error)
}

type indexingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexingServiceClient(cc grpc.ClientConnInterface) IndexingServiceClient {
	return &indexingServiceClient{cc}
}

func (c *indexingServiceClient) ProcessDocument(ctx context.Context, in *ProcessDocumentRequest, opts ...grpc.CallOption) (*ProcessDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessDocumentResponse)
	err := c.cc.Invoke(ctx, IndexingService_ProcessDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexingServiceClient) ProcessDocumentBatch(ctx context.Context, in *ProcessDocumentBatchRequest, opts ...grpc.CallOption) (*ProcessDocumentBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessDocumentBatchResponse)
	err := c.cc.Invoke(ctx, IndexingService_ProcessDocumentBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexingServiceClient) IndexIncremental(ctx context.Context, in *IndexIncrementalRequest, opts ...grpc.CallOption) (*IndexIncrementalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IndexIncrementalResponse)
	err := c.cc.Invoke(ctx, IndexingService_IndexIncremental_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexingServiceClient) RebuildIndex(ctx context.Context, in *RebuildIndexRequest, opts ...grpc.CallOption) (*RebuildIndexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RebuildIndexResponse)
	err := c.cc.Invoke(ctx, IndexingService_RebuildIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexingServiceClient) GetProcessingStatus(ctx context.Context, in *GetProcessingStatusRequest, opts ...grpc.CallOption) (*ProcessingStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessingStatus)
	err := c.cc.Invoke(ctx, IndexingService_GetProcessingStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexingServiceClient) GetDocumentChunks(ctx context.Context, in *GetDocumentChunksRequest, opts ...grpc.CallOption) (*GetDocumentChunksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocumentChunksResponse)
	err := c.cc.Invoke(ctx, IndexingService_GetDocumentChunks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexingServiceClient) DeleteDocumentIndex(ctx context.Context, in *DeleteDocumentIndexRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IndexingService_DeleteDocumentIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexingServiceClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*StatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, IndexingService_GetStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexingServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, IndexingService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexingServiceClient) ReadinessCheck(ctx context.Context, in *ReadinessCheckRequest, opts ...grpc.CallOption) (*ReadinessCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadinessCheckResponse)
	err := c.cc.Invoke(ctx, IndexingService_ReadinessCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexingServiceServer is the server API for IndexingService service.
// All implementations must embed UnimplementedIndexingServiceServer
// for forward compatibility.
//
// IndexingService 索引服务
type IndexingServiceServer interface {
	// 文档处理
	ProcessDocument(context.Context, *ProcessDocumentRequest) (*ProcessDocumentResponse, error)
	// 批量处理
	ProcessDocumentBatch(context.Context, *ProcessDocumentBatchRequest) (*ProcessDocumentBatchResponse, error)
	// 增量索引
	IndexIncremental(context.Context, *IndexIncrementalRequest) (*IndexIncrementalResponse, error)
	// 重建索引
	RebuildIndex(context.Context, *RebuildIndexRequest) (*RebuildIndexResponse, error)
	// 获取处理状态
	GetProcessingStatus(context.Context, *GetProcessingStatusRequest) (*ProcessingStatus, error)
	// 获取文档chunks
	GetDocumentChunks(context.Context, *GetDocumentChunksRequest) (*GetDocumentChunksResponse, error)
	// 删除文档索引
	DeleteDocumentIndex(context.Context, *DeleteDocumentIndexRequest) (*emptypb.Empty, error)
	// 获取统计信息
	GetStats(context.Context, *GetStatsRequest) (*StatsResponse, error)
	// 健康检查
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// 就绪检查
	ReadinessCheck(context.Context, *ReadinessCheckRequest) (*ReadinessCheckResponse, error)
	mustEmbedUnimplementedIndexingServiceServer()
}

// UnimplementedIndexingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIndexingServiceServer struct{}

func (UnimplementedIndexingServiceServer) ProcessDocument(context.Context, *ProcessDocumentRequest) (*ProcessDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessDocument not implemented")
}
func (UnimplementedIndexingServiceServer) ProcessDocumentBatch(context.Context, *ProcessDocumentBatchRequest) (*ProcessDocumentBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessDocumentBatch not implemented")
}
func (UnimplementedIndexingServiceServer) IndexIncremental(context.Context, *IndexIncrementalRequest) (*IndexIncrementalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexIncremental not implemented")
}
func (UnimplementedIndexingServiceServer) RebuildIndex(context.Context, *RebuildIndexRequest) (*RebuildIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebuildIndex not implemented")
}
func (UnimplementedIndexingServiceServer) GetProcessingStatus(context.Context, *GetProcessingStatusRequest) (*ProcessingStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessingStatus not implemented")
}
func (UnimplementedIndexingServiceServer) GetDocumentChunks(context.Context, *GetDocumentChunksRequest) (*GetDocumentChunksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentChunks not implemented")
}
func (UnimplementedIndexingServiceServer) DeleteDocumentIndex(context.Context, *DeleteDocumentIndexRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocumentIndex not implemented")
}
func (UnimplementedIndexingServiceServer) GetStats(context.Context, *GetStatsRequest) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedIndexingServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedIndexingServiceServer) ReadinessCheck(context.Context, *ReadinessCheckRequest) (*ReadinessCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadinessCheck not implemented")
}
func (UnimplementedIndexingServiceServer) mustEmbedUnimplementedIndexingServiceServer() {}
func (UnimplementedIndexingServiceServer) testEmbeddedByValue()                         {}

// UnsafeIndexingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexingServiceServer will
// result in compilation errors.
type UnsafeIndexingServiceServer interface {
	mustEmbedUnimplementedIndexingServiceServer()
}

func RegisterIndexingServiceServer(s grpc.ServiceRegistrar, srv IndexingServiceServer) {
	// If the following call pancis, it indicates UnimplementedIndexingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IndexingService_ServiceDesc, srv)
}

func _IndexingService_ProcessDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexingServiceServer).ProcessDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexingService_ProcessDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexingServiceServer).ProcessDocument(ctx, req.(*ProcessDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexingService_ProcessDocumentBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessDocumentBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexingServiceServer).ProcessDocumentBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexingService_ProcessDocumentBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexingServiceServer).ProcessDocumentBatch(ctx, req.(*ProcessDocumentBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexingService_IndexIncremental_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexIncrementalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexingServiceServer).IndexIncremental(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexingService_IndexIncremental_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexingServiceServer).IndexIncremental(ctx, req.(*IndexIncrementalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexingService_RebuildIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebuildIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexingServiceServer).RebuildIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexingService_RebuildIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexingServiceServer).RebuildIndex(ctx, req.(*RebuildIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexingService_GetProcessingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexingServiceServer).GetProcessingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexingService_GetProcessingStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexingServiceServer).GetProcessingStatus(ctx, req.(*GetProcessingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexingService_GetDocumentChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentChunksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexingServiceServer).GetDocumentChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexingService_GetDocumentChunks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexingServiceServer).GetDocumentChunks(ctx, req.(*GetDocumentChunksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexingService_DeleteDocumentIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocumentIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexingServiceServer).DeleteDocumentIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexingService_DeleteDocumentIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexingServiceServer).DeleteDocumentIndex(ctx, req.(*DeleteDocumentIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexingService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexingServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexingService_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexingServiceServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexingService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexingServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexingService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexingServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexingService_ReadinessCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadinessCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexingServiceServer).ReadinessCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexingService_ReadinessCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexingServiceServer).ReadinessCheck(ctx, req.(*ReadinessCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IndexingService_ServiceDesc is the grpc.ServiceDesc for IndexingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndexingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "indexing.v1.IndexingService",
	HandlerType: (*IndexingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessDocument",
			Handler:    _IndexingService_ProcessDocument_Handler,
		},
		{
			MethodName: "ProcessDocumentBatch",
			Handler:    _IndexingService_ProcessDocumentBatch_Handler,
		},
		{
			MethodName: "IndexIncremental",
			Handler:    _IndexingService_IndexIncremental_Handler,
		},
		{
			MethodName: "RebuildIndex",
			Handler:    _IndexingService_RebuildIndex_Handler,
		},
		{
			MethodName: "GetProcessingStatus",
			Handler:    _IndexingService_GetProcessingStatus_Handler,
		},
		{
			MethodName: "GetDocumentChunks",
			Handler:    _IndexingService_GetDocumentChunks_Handler,
		},
		{
			MethodName: "DeleteDocumentIndex",
			Handler:    _IndexingService_DeleteDocumentIndex_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _IndexingService_GetStats_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _IndexingService_HealthCheck_Handler,
		},
		{
			MethodName: "ReadinessCheck",
			Handler:    _IndexingService_ReadinessCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "indexing/v1/indexing.proto",
}
