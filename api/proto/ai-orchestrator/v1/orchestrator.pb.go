// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.33.0
// source: api/proto/ai-orchestrator/v1/orchestrator.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 处理模式
type ProcessMode int32

const (
	// 自动模式（自动选择最佳引擎）
	ProcessMode_MODE_AUTO ProcessMode = 0
	// RAG 模式（检索增强生成）
	ProcessMode_MODE_RAG ProcessMode = 1
	// Agent 模式（工具调用）
	ProcessMode_MODE_AGENT ProcessMode = 2
	// 对话模式（纯对话）
	ProcessMode_MODE_CHAT ProcessMode = 3
	// 语音模式
	ProcessMode_MODE_VOICE ProcessMode = 4
	// 多模态模式
	ProcessMode_MODE_MULTIMODAL ProcessMode = 5
)

// Enum value maps for ProcessMode.
var (
	ProcessMode_name = map[int32]string{
		0: "MODE_AUTO",
		1: "MODE_RAG",
		2: "MODE_AGENT",
		3: "MODE_CHAT",
		4: "MODE_VOICE",
		5: "MODE_MULTIMODAL",
	}
	ProcessMode_value = map[string]int32{
		"MODE_AUTO":       0,
		"MODE_RAG":        1,
		"MODE_AGENT":      2,
		"MODE_CHAT":       3,
		"MODE_VOICE":      4,
		"MODE_MULTIMODAL": 5,
	}
)

func (x ProcessMode) Enum() *ProcessMode {
	p := new(ProcessMode)
	*p = x
	return p
}

func (x ProcessMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessMode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_ai_orchestrator_v1_orchestrator_proto_enumTypes[0].Descriptor()
}

func (ProcessMode) Type() protoreflect.EnumType {
	return &file_api_proto_ai_orchestrator_v1_orchestrator_proto_enumTypes[0]
}

func (x ProcessMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessMode.Descriptor instead.
func (ProcessMode) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescGZIP(), []int{0}
}

// 流式事件类型
type StreamEventType int32

const (
	StreamEventType_EVENT_UNKNOWN     StreamEventType = 0
	StreamEventType_EVENT_START       StreamEventType = 1 // 开始
	StreamEventType_EVENT_DELTA       StreamEventType = 2 // 内容增量
	StreamEventType_EVENT_CITATION    StreamEventType = 3 // 引用
	StreamEventType_EVENT_TOOL_CALL   StreamEventType = 4 // 工具调用
	StreamEventType_EVENT_TOOL_RESULT StreamEventType = 5 // 工具结果
	StreamEventType_EVENT_THINKING    StreamEventType = 6 // 思考过程
	StreamEventType_EVENT_ERROR       StreamEventType = 7 // 错误
	StreamEventType_EVENT_FINISH      StreamEventType = 8 // 完成
)

// Enum value maps for StreamEventType.
var (
	StreamEventType_name = map[int32]string{
		0: "EVENT_UNKNOWN",
		1: "EVENT_START",
		2: "EVENT_DELTA",
		3: "EVENT_CITATION",
		4: "EVENT_TOOL_CALL",
		5: "EVENT_TOOL_RESULT",
		6: "EVENT_THINKING",
		7: "EVENT_ERROR",
		8: "EVENT_FINISH",
	}
	StreamEventType_value = map[string]int32{
		"EVENT_UNKNOWN":     0,
		"EVENT_START":       1,
		"EVENT_DELTA":       2,
		"EVENT_CITATION":    3,
		"EVENT_TOOL_CALL":   4,
		"EVENT_TOOL_RESULT": 5,
		"EVENT_THINKING":    6,
		"EVENT_ERROR":       7,
		"EVENT_FINISH":      8,
	}
)

func (x StreamEventType) Enum() *StreamEventType {
	p := new(StreamEventType)
	*p = x
	return p
}

func (x StreamEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_ai_orchestrator_v1_orchestrator_proto_enumTypes[1].Descriptor()
}

func (StreamEventType) Type() protoreflect.EnumType {
	return &file_api_proto_ai_orchestrator_v1_orchestrator_proto_enumTypes[1]
}

func (x StreamEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamEventType.Descriptor instead.
func (StreamEventType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescGZIP(), []int{1}
}

// 工作流状态
type WorkflowStatus int32

const (
	WorkflowStatus_STATUS_UNKNOWN   WorkflowStatus = 0
	WorkflowStatus_STATUS_PENDING   WorkflowStatus = 1
	WorkflowStatus_STATUS_RUNNING   WorkflowStatus = 2
	WorkflowStatus_STATUS_COMPLETED WorkflowStatus = 3
	WorkflowStatus_STATUS_FAILED    WorkflowStatus = 4
	WorkflowStatus_STATUS_CANCELLED WorkflowStatus = 5
)

// Enum value maps for WorkflowStatus.
var (
	WorkflowStatus_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_PENDING",
		2: "STATUS_RUNNING",
		3: "STATUS_COMPLETED",
		4: "STATUS_FAILED",
		5: "STATUS_CANCELLED",
	}
	WorkflowStatus_value = map[string]int32{
		"STATUS_UNKNOWN":   0,
		"STATUS_PENDING":   1,
		"STATUS_RUNNING":   2,
		"STATUS_COMPLETED": 3,
		"STATUS_FAILED":    4,
		"STATUS_CANCELLED": 5,
	}
)

func (x WorkflowStatus) Enum() *WorkflowStatus {
	p := new(WorkflowStatus)
	*p = x
	return p
}

func (x WorkflowStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_ai_orchestrator_v1_orchestrator_proto_enumTypes[2].Descriptor()
}

func (WorkflowStatus) Type() protoreflect.EnumType {
	return &file_api_proto_ai_orchestrator_v1_orchestrator_proto_enumTypes[2]
}

func (x WorkflowStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowStatus.Descriptor instead.
func (WorkflowStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescGZIP(), []int{2}
}

// 任务状态
type TaskStatus int32

const (
	TaskStatus_TASK_UNKNOWN   TaskStatus = 0
	TaskStatus_TASK_PENDING   TaskStatus = 1 // 等待中
	TaskStatus_TASK_RUNNING   TaskStatus = 2 // 运行中
	TaskStatus_TASK_COMPLETED TaskStatus = 3 // 已完成
	TaskStatus_TASK_FAILED    TaskStatus = 4 // 失败
	TaskStatus_TASK_CANCELLED TaskStatus = 5 // 已取消
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0: "TASK_UNKNOWN",
		1: "TASK_PENDING",
		2: "TASK_RUNNING",
		3: "TASK_COMPLETED",
		4: "TASK_FAILED",
		5: "TASK_CANCELLED",
	}
	TaskStatus_value = map[string]int32{
		"TASK_UNKNOWN":   0,
		"TASK_PENDING":   1,
		"TASK_RUNNING":   2,
		"TASK_COMPLETED": 3,
		"TASK_FAILED":    4,
		"TASK_CANCELLED": 5,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_ai_orchestrator_v1_orchestrator_proto_enumTypes[3].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_api_proto_ai_orchestrator_v1_orchestrator_proto_enumTypes[3]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescGZIP(), []int{3}
}

// 处理消息请求
type ProcessMessageRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 会话 ID
	ConversationId string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	// 消息内容
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 用户 ID
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 租户 ID
	TenantId string `protobuf:"bytes,4,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// 消息上下文
	Context *MessageContext `protobuf:"bytes,5,opt,name=context,proto3" json:"context,omitempty"`
	// 处理模式
	Mode ProcessMode `protobuf:"varint,6,opt,name=mode,proto3,enum=ai.orchestrator.v1.ProcessMode" json:"mode,omitempty"`
	// 配置
	Config        *ProcessConfig `protobuf:"bytes,7,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessMessageRequest) Reset() {
	*x = ProcessMessageRequest{}
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessMessageRequest) ProtoMessage() {}

func (x *ProcessMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessMessageRequest.ProtoReflect.Descriptor instead.
func (*ProcessMessageRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescGZIP(), []int{0}
}

func (x *ProcessMessageRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ProcessMessageRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ProcessMessageRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ProcessMessageRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ProcessMessageRequest) GetContext() *MessageContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ProcessMessageRequest) GetMode() ProcessMode {
	if x != nil {
		return x.Mode
	}
	return ProcessMode_MODE_AUTO
}

func (x *ProcessMessageRequest) GetConfig() *ProcessConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// 消息上下文
type MessageContext struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 历史消息
	History []*HistoryMessage `protobuf:"bytes,1,rep,name=history,proto3" json:"history,omitempty"`
	// 系统提示
	SystemPrompt string `protobuf:"bytes,2,opt,name=system_prompt,json=systemPrompt,proto3" json:"system_prompt,omitempty"`
	// 用户偏好
	UserPreferences map[string]string `protobuf:"bytes,3,rep,name=user_preferences,json=userPreferences,proto3" json:"user_preferences,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 会话元数据
	Metadata      map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageContext) Reset() {
	*x = MessageContext{}
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageContext) ProtoMessage() {}

func (x *MessageContext) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageContext.ProtoReflect.Descriptor instead.
func (*MessageContext) Descriptor() ([]byte, []int) {
	return file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescGZIP(), []int{1}
}

func (x *MessageContext) GetHistory() []*HistoryMessage {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *MessageContext) GetSystemPrompt() string {
	if x != nil {
		return x.SystemPrompt
	}
	return ""
}

func (x *MessageContext) GetUserPreferences() map[string]string {
	if x != nil {
		return x.UserPreferences
	}
	return nil
}

func (x *MessageContext) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 历史消息
type HistoryMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 角色 (user/assistant/system)
	Role string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	// 内容
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	// 时间戳
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HistoryMessage) Reset() {
	*x = HistoryMessage{}
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistoryMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryMessage) ProtoMessage() {}

func (x *HistoryMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryMessage.ProtoReflect.Descriptor instead.
func (*HistoryMessage) Descriptor() ([]byte, []int) {
	return file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescGZIP(), []int{2}
}

func (x *HistoryMessage) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *HistoryMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *HistoryMessage) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// 处理配置
type ProcessConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 模型名称
	Model string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	// 温度
	Temperature float32 `protobuf:"fixed32,2,opt,name=temperature,proto3" json:"temperature,omitempty"`
	// 最大 Token 数
	MaxTokens int32 `protobuf:"varint,3,opt,name=max_tokens,json=maxTokens,proto3" json:"max_tokens,omitempty"`
	// Top P
	TopP float32 `protobuf:"fixed32,4,opt,name=top_p,json=topP,proto3" json:"top_p,omitempty"`
	// 流式输出
	Stream bool `protobuf:"varint,5,opt,name=stream,proto3" json:"stream,omitempty"`
	// 启用 RAG
	EnableRag bool `protobuf:"varint,6,opt,name=enable_rag,json=enableRag,proto3" json:"enable_rag,omitempty"`
	// RAG 配置
	RagConfig *RAGConfig `protobuf:"bytes,7,opt,name=rag_config,json=ragConfig,proto3" json:"rag_config,omitempty"`
	// Agent 配置
	AgentConfig   *AgentConfig `protobuf:"bytes,8,opt,name=agent_config,json=agentConfig,proto3" json:"agent_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessConfig) Reset() {
	*x = ProcessConfig{}
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessConfig) ProtoMessage() {}

func (x *ProcessConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessConfig.ProtoReflect.Descriptor instead.
func (*ProcessConfig) Descriptor() ([]byte, []int) {
	return file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescGZIP(), []int{3}
}

func (x *ProcessConfig) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ProcessConfig) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *ProcessConfig) GetMaxTokens() int32 {
	if x != nil {
		return x.MaxTokens
	}
	return 0
}

func (x *ProcessConfig) GetTopP() float32 {
	if x != nil {
		return x.TopP
	}
	return 0
}

func (x *ProcessConfig) GetStream() bool {
	if x != nil {
		return x.Stream
	}
	return false
}

func (x *ProcessConfig) GetEnableRag() bool {
	if x != nil {
		return x.EnableRag
	}
	return false
}

func (x *ProcessConfig) GetRagConfig() *RAGConfig {
	if x != nil {
		return x.RagConfig
	}
	return nil
}

func (x *ProcessConfig) GetAgentConfig() *AgentConfig {
	if x != nil {
		return x.AgentConfig
	}
	return nil
}

// RAG 配置
type RAGConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 知识库 ID
	KnowledgeBaseIds []string `protobuf:"bytes,1,rep,name=knowledge_base_ids,json=knowledgeBaseIds,proto3" json:"knowledge_base_ids,omitempty"`
	// 检索数量
	TopK int32 `protobuf:"varint,2,opt,name=top_k,json=topK,proto3" json:"top_k,omitempty"`
	// 相似度阈值
	SimilarityThreshold float32 `protobuf:"fixed32,3,opt,name=similarity_threshold,json=similarityThreshold,proto3" json:"similarity_threshold,omitempty"`
	// 检索模式 (vector/bm25/hybrid)
	RetrievalMode string `protobuf:"bytes,4,opt,name=retrieval_mode,json=retrievalMode,proto3" json:"retrieval_mode,omitempty"`
	// 是否重排序
	EnableRerank  bool `protobuf:"varint,5,opt,name=enable_rerank,json=enableRerank,proto3" json:"enable_rerank,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RAGConfig) Reset() {
	*x = RAGConfig{}
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RAGConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RAGConfig) ProtoMessage() {}

func (x *RAGConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RAGConfig.ProtoReflect.Descriptor instead.
func (*RAGConfig) Descriptor() ([]byte, []int) {
	return file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescGZIP(), []int{4}
}

func (x *RAGConfig) GetKnowledgeBaseIds() []string {
	if x != nil {
		return x.KnowledgeBaseIds
	}
	return nil
}

func (x *RAGConfig) GetTopK() int32 {
	if x != nil {
		return x.TopK
	}
	return 0
}

func (x *RAGConfig) GetSimilarityThreshold() float32 {
	if x != nil {
		return x.SimilarityThreshold
	}
	return 0
}

func (x *RAGConfig) GetRetrievalMode() string {
	if x != nil {
		return x.RetrievalMode
	}
	return ""
}

func (x *RAGConfig) GetEnableRerank() bool {
	if x != nil {
		return x.EnableRerank
	}
	return false
}

// Agent 配置
type AgentConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 允许的工具
	AllowedTools []string `protobuf:"bytes,1,rep,name=allowed_tools,json=allowedTools,proto3" json:"allowed_tools,omitempty"`
	// 最大迭代次数
	MaxIterations int32 `protobuf:"varint,2,opt,name=max_iterations,json=maxIterations,proto3" json:"max_iterations,omitempty"`
	// 超时时间（秒）
	Timeout int32 `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// 启用长期记忆
	EnableMemory  bool `protobuf:"varint,4,opt,name=enable_memory,json=enableMemory,proto3" json:"enable_memory,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentConfig) Reset() {
	*x = AgentConfig{}
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentConfig) ProtoMessage() {}

func (x *AgentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentConfig.ProtoReflect.Descriptor instead.
func (*AgentConfig) Descriptor() ([]byte, []int) {
	return file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescGZIP(), []int{5}
}

func (x *AgentConfig) GetAllowedTools() []string {
	if x != nil {
		return x.AllowedTools
	}
	return nil
}

func (x *AgentConfig) GetMaxIterations() int32 {
	if x != nil {
		return x.MaxIterations
	}
	return 0
}

func (x *AgentConfig) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *AgentConfig) GetEnableMemory() bool {
	if x != nil {
		return x.EnableMemory
	}
	return false
}

// 处理消息响应（非流式）
type ProcessMessageResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 任务 ID
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// 回复内容
	Reply string `protobuf:"bytes,2,opt,name=reply,proto3" json:"reply,omitempty"`
	// 使用的引擎
	Engine string `protobuf:"bytes,3,opt,name=engine,proto3" json:"engine,omitempty"`
	// 引用来源
	Citations []*Citation `protobuf:"bytes,4,rep,name=citations,proto3" json:"citations,omitempty"`
	// 工具调用记录
	ToolCalls []*ToolCall `protobuf:"bytes,5,rep,name=tool_calls,json=toolCalls,proto3" json:"tool_calls,omitempty"`
	// 元数据
	Metadata map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Token 使用量
	TokenUsage *TokenUsage `protobuf:"bytes,7,opt,name=token_usage,json=tokenUsage,proto3" json:"token_usage,omitempty"`
	// 处理时长（毫秒）
	DurationMs    int64 `protobuf:"varint,8,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessMessageResponse) Reset() {
	*x = ProcessMessageResponse{}
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessMessageResponse) ProtoMessage() {}

func (x *ProcessMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessMessageResponse.ProtoReflect.Descriptor instead.
func (*ProcessMessageResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescGZIP(), []int{6}
}

func (x *ProcessMessageResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ProcessMessageResponse) GetReply() string {
	if x != nil {
		return x.Reply
	}
	return ""
}

func (x *ProcessMessageResponse) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *ProcessMessageResponse) GetCitations() []*Citation {
	if x != nil {
		return x.Citations
	}
	return nil
}

func (x *ProcessMessageResponse) GetToolCalls() []*ToolCall {
	if x != nil {
		return x.ToolCalls
	}
	return nil
}

func (x *ProcessMessageResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ProcessMessageResponse) GetTokenUsage() *TokenUsage {
	if x != nil {
		return x.TokenUsage
	}
	return nil
}

func (x *ProcessMessageResponse) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

// 处理消息响应（流式）
type ProcessMessageStreamResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 任务 ID
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// 事件类型
	EventType StreamEventType `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=ai.orchestrator.v1.StreamEventType" json:"event_type,omitempty"`
	// 内容增量
	Delta string `protobuf:"bytes,3,opt,name=delta,proto3" json:"delta,omitempty"`
	// 引用来源
	Citations []*Citation `protobuf:"bytes,4,rep,name=citations,proto3" json:"citations,omitempty"`
	// 工具调用
	ToolCall *ToolCall `protobuf:"bytes,5,opt,name=tool_call,json=toolCall,proto3" json:"tool_call,omitempty"`
	// 元数据
	Metadata map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 是否结束
	Finished bool `protobuf:"varint,7,opt,name=finished,proto3" json:"finished,omitempty"`
	// 最终统计
	FinalStats    *FinalStats `protobuf:"bytes,8,opt,name=final_stats,json=finalStats,proto3" json:"final_stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessMessageStreamResponse) Reset() {
	*x = ProcessMessageStreamResponse{}
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessMessageStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessMessageStreamResponse) ProtoMessage() {}

func (x *ProcessMessageStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessMessageStreamResponse.ProtoReflect.Descriptor instead.
func (*ProcessMessageStreamResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescGZIP(), []int{7}
}

func (x *ProcessMessageStreamResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ProcessMessageStreamResponse) GetEventType() StreamEventType {
	if x != nil {
		return x.EventType
	}
	return StreamEventType_EVENT_UNKNOWN
}

func (x *ProcessMessageStreamResponse) GetDelta() string {
	if x != nil {
		return x.Delta
	}
	return ""
}

func (x *ProcessMessageStreamResponse) GetCitations() []*Citation {
	if x != nil {
		return x.Citations
	}
	return nil
}

func (x *ProcessMessageStreamResponse) GetToolCall() *ToolCall {
	if x != nil {
		return x.ToolCall
	}
	return nil
}

func (x *ProcessMessageStreamResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ProcessMessageStreamResponse) GetFinished() bool {
	if x != nil {
		return x.Finished
	}
	return false
}

func (x *ProcessMessageStreamResponse) GetFinalStats() *FinalStats {
	if x != nil {
		return x.FinalStats
	}
	return nil
}

// 引用来源
type Citation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 引用 ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 文档 ID
	DocumentId string `protobuf:"bytes,2,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	// 文档标题
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// 引用片段
	Snippet string `protobuf:"bytes,4,opt,name=snippet,proto3" json:"snippet,omitempty"`
	// 相似度分数
	Score float32 `protobuf:"fixed32,5,opt,name=score,proto3" json:"score,omitempty"`
	// 元数据
	Metadata      map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Citation) Reset() {
	*x = Citation{}
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Citation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Citation) ProtoMessage() {}

func (x *Citation) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Citation.ProtoReflect.Descriptor instead.
func (*Citation) Descriptor() ([]byte, []int) {
	return file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescGZIP(), []int{8}
}

func (x *Citation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Citation) GetDocumentId() string {
	if x != nil {
		return x.DocumentId
	}
	return ""
}

func (x *Citation) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Citation) GetSnippet() string {
	if x != nil {
		return x.Snippet
	}
	return ""
}

func (x *Citation) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Citation) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 工具调用
type ToolCall struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 调用 ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 工具名称
	Tool string `protobuf:"bytes,2,opt,name=tool,proto3" json:"tool,omitempty"`
	// 参数
	Arguments string `protobuf:"bytes,3,opt,name=arguments,proto3" json:"arguments,omitempty"`
	// 结果
	Result string `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	// 状态 (pending/success/failed)
	Status string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// 错误信息
	Error string `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
	// 执行时长（毫秒）
	DurationMs    int64 `protobuf:"varint,7,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToolCall) Reset() {
	*x = ToolCall{}
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToolCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolCall) ProtoMessage() {}

func (x *ToolCall) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolCall.ProtoReflect.Descriptor instead.
func (*ToolCall) Descriptor() ([]byte, []int) {
	return file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescGZIP(), []int{9}
}

func (x *ToolCall) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ToolCall) GetTool() string {
	if x != nil {
		return x.Tool
	}
	return ""
}

func (x *ToolCall) GetArguments() string {
	if x != nil {
		return x.Arguments
	}
	return ""
}

func (x *ToolCall) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *ToolCall) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ToolCall) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ToolCall) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

// Token 使用量
type TokenUsage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 提示 Token
	PromptTokens int32 `protobuf:"varint,1,opt,name=prompt_tokens,json=promptTokens,proto3" json:"prompt_tokens,omitempty"`
	// 完成 Token
	CompletionTokens int32 `protobuf:"varint,2,opt,name=completion_tokens,json=completionTokens,proto3" json:"completion_tokens,omitempty"`
	// 总 Token
	TotalTokens int32 `protobuf:"varint,3,opt,name=total_tokens,json=totalTokens,proto3" json:"total_tokens,omitempty"`
	// 成本（美元）
	CostUsd       float32 `protobuf:"fixed32,4,opt,name=cost_usd,json=costUsd,proto3" json:"cost_usd,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenUsage) Reset() {
	*x = TokenUsage{}
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenUsage) ProtoMessage() {}

func (x *TokenUsage) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenUsage.ProtoReflect.Descriptor instead.
func (*TokenUsage) Descriptor() ([]byte, []int) {
	return file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescGZIP(), []int{10}
}

func (x *TokenUsage) GetPromptTokens() int32 {
	if x != nil {
		return x.PromptTokens
	}
	return 0
}

func (x *TokenUsage) GetCompletionTokens() int32 {
	if x != nil {
		return x.CompletionTokens
	}
	return 0
}

func (x *TokenUsage) GetTotalTokens() int32 {
	if x != nil {
		return x.TotalTokens
	}
	return 0
}

func (x *TokenUsage) GetCostUsd() float32 {
	if x != nil {
		return x.CostUsd
	}
	return 0
}

// 最终统计
type FinalStats struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Token 使用量
	TokenUsage *TokenUsage `protobuf:"bytes,1,opt,name=token_usage,json=tokenUsage,proto3" json:"token_usage,omitempty"`
	// 处理时长（毫秒）
	DurationMs int64 `protobuf:"varint,2,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	// 使用的引擎
	Engine string `protobuf:"bytes,3,opt,name=engine,proto3" json:"engine,omitempty"`
	// 工具调用次数
	ToolCallsCount int32 `protobuf:"varint,4,opt,name=tool_calls_count,json=toolCallsCount,proto3" json:"tool_calls_count,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FinalStats) Reset() {
	*x = FinalStats{}
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalStats) ProtoMessage() {}

func (x *FinalStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalStats.ProtoReflect.Descriptor instead.
func (*FinalStats) Descriptor() ([]byte, []int) {
	return file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescGZIP(), []int{11}
}

func (x *FinalStats) GetTokenUsage() *TokenUsage {
	if x != nil {
		return x.TokenUsage
	}
	return nil
}

func (x *FinalStats) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *FinalStats) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *FinalStats) GetToolCallsCount() int32 {
	if x != nil {
		return x.ToolCallsCount
	}
	return 0
}

// 执行工作流请求
type ExecuteWorkflowRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 工作流 ID
	WorkflowId string `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// 工作流定义（JSON）
	WorkflowDefinition string `protobuf:"bytes,2,opt,name=workflow_definition,json=workflowDefinition,proto3" json:"workflow_definition,omitempty"`
	// 输入参数
	Inputs map[string]string `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 用户 ID
	UserId string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 租户 ID
	TenantId      string `protobuf:"bytes,5,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteWorkflowRequest) Reset() {
	*x = ExecuteWorkflowRequest{}
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteWorkflowRequest) ProtoMessage() {}

func (x *ExecuteWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteWorkflowRequest.ProtoReflect.Descriptor instead.
func (*ExecuteWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescGZIP(), []int{12}
}

func (x *ExecuteWorkflowRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *ExecuteWorkflowRequest) GetWorkflowDefinition() string {
	if x != nil {
		return x.WorkflowDefinition
	}
	return ""
}

func (x *ExecuteWorkflowRequest) GetInputs() map[string]string {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *ExecuteWorkflowRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ExecuteWorkflowRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

// 执行工作流响应
type ExecuteWorkflowResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 任务 ID
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// 工作流实例 ID
	InstanceId string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// 状态
	Status WorkflowStatus `protobuf:"varint,3,opt,name=status,proto3,enum=ai.orchestrator.v1.WorkflowStatus" json:"status,omitempty"`
	// 结果
	Outputs map[string]string `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 执行步骤
	Steps []*WorkflowStep `protobuf:"bytes,5,rep,name=steps,proto3" json:"steps,omitempty"`
	// 元数据
	Metadata      map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteWorkflowResponse) Reset() {
	*x = ExecuteWorkflowResponse{}
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteWorkflowResponse) ProtoMessage() {}

func (x *ExecuteWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteWorkflowResponse.ProtoReflect.Descriptor instead.
func (*ExecuteWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescGZIP(), []int{13}
}

func (x *ExecuteWorkflowResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ExecuteWorkflowResponse) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ExecuteWorkflowResponse) GetStatus() WorkflowStatus {
	if x != nil {
		return x.Status
	}
	return WorkflowStatus_STATUS_UNKNOWN
}

func (x *ExecuteWorkflowResponse) GetOutputs() map[string]string {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *ExecuteWorkflowResponse) GetSteps() []*WorkflowStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *ExecuteWorkflowResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 工作流步骤
type WorkflowStep struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 步骤 ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 步骤名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 状态
	Status WorkflowStatus `protobuf:"varint,3,opt,name=status,proto3,enum=ai.orchestrator.v1.WorkflowStatus" json:"status,omitempty"`
	// 引擎
	Engine string `protobuf:"bytes,4,opt,name=engine,proto3" json:"engine,omitempty"`
	// 输入
	Inputs map[string]string `protobuf:"bytes,5,rep,name=inputs,proto3" json:"inputs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 输出
	Outputs map[string]string `protobuf:"bytes,6,rep,name=outputs,proto3" json:"outputs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 错误信息
	Error string `protobuf:"bytes,7,opt,name=error,proto3" json:"error,omitempty"`
	// 执行时长（毫秒）
	DurationMs    int64 `protobuf:"varint,8,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowStep) Reset() {
	*x = WorkflowStep{}
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowStep) ProtoMessage() {}

func (x *WorkflowStep) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowStep.ProtoReflect.Descriptor instead.
func (*WorkflowStep) Descriptor() ([]byte, []int) {
	return file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescGZIP(), []int{14}
}

func (x *WorkflowStep) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkflowStep) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowStep) GetStatus() WorkflowStatus {
	if x != nil {
		return x.Status
	}
	return WorkflowStatus_STATUS_UNKNOWN
}

func (x *WorkflowStep) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *WorkflowStep) GetInputs() map[string]string {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *WorkflowStep) GetOutputs() map[string]string {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *WorkflowStep) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *WorkflowStep) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

// 取消任务请求
type CancelTaskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 任务 ID
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// 用户 ID
	UserId        string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelTaskRequest) Reset() {
	*x = CancelTaskRequest{}
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTaskRequest) ProtoMessage() {}

func (x *CancelTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTaskRequest.ProtoReflect.Descriptor instead.
func (*CancelTaskRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescGZIP(), []int{15}
}

func (x *CancelTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *CancelTaskRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// 取消任务响应
type CancelTaskResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 是否成功
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// 消息
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelTaskResponse) Reset() {
	*x = CancelTaskResponse{}
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTaskResponse) ProtoMessage() {}

func (x *CancelTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTaskResponse.ProtoReflect.Descriptor instead.
func (*CancelTaskResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescGZIP(), []int{16}
}

func (x *CancelTaskResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CancelTaskResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 获取任务状态请求
type GetTaskStatusRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 任务 ID
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// 用户 ID
	UserId        string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskStatusRequest) Reset() {
	*x = GetTaskStatusRequest{}
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskStatusRequest) ProtoMessage() {}

func (x *GetTaskStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskStatusRequest.ProtoReflect.Descriptor instead.
func (*GetTaskStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescGZIP(), []int{17}
}

func (x *GetTaskStatusRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetTaskStatusRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// 获取任务状态响应
type GetTaskStatusResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 任务 ID
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// 状态
	Status TaskStatus `protobuf:"varint,2,opt,name=status,proto3,enum=ai.orchestrator.v1.TaskStatus" json:"status,omitempty"`
	// 进度（0-100）
	Progress int32 `protobuf:"varint,3,opt,name=progress,proto3" json:"progress,omitempty"`
	// 当前步骤
	CurrentStep string `protobuf:"bytes,4,opt,name=current_step,json=currentStep,proto3" json:"current_step,omitempty"`
	// 元数据
	Metadata map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskStatusResponse) Reset() {
	*x = GetTaskStatusResponse{}
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskStatusResponse) ProtoMessage() {}

func (x *GetTaskStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskStatusResponse.ProtoReflect.Descriptor instead.
func (*GetTaskStatusResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescGZIP(), []int{18}
}

func (x *GetTaskStatusResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetTaskStatusResponse) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_TASK_UNKNOWN
}

func (x *GetTaskStatusResponse) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *GetTaskStatusResponse) GetCurrentStep() string {
	if x != nil {
		return x.CurrentStep
	}
	return ""
}

func (x *GetTaskStatusResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetTaskStatusResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetTaskStatusResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_api_proto_ai_orchestrator_v1_orchestrator_proto protoreflect.FileDescriptor

const file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDesc = "" +
	"\n" +
	"/api/proto/ai-orchestrator/v1/orchestrator.proto\x12\x12ai.orchestrator.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\xbe\x02\n" +
	"\x15ProcessMessageRequest\x12'\n" +
	"\x0fconversation_id\x18\x01 \x01(\tR\x0econversationId\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12\x1b\n" +
	"\ttenant_id\x18\x04 \x01(\tR\btenantId\x12<\n" +
	"\acontext\x18\x05 \x01(\v2\".ai.orchestrator.v1.MessageContextR\acontext\x123\n" +
	"\x04mode\x18\x06 \x01(\x0e2\x1f.ai.orchestrator.v1.ProcessModeR\x04mode\x129\n" +
	"\x06config\x18\a \x01(\v2!.ai.orchestrator.v1.ProcessConfigR\x06config\"\xa6\x03\n" +
	"\x0eMessageContext\x12<\n" +
	"\ahistory\x18\x01 \x03(\v2\".ai.orchestrator.v1.HistoryMessageR\ahistory\x12#\n" +
	"\rsystem_prompt\x18\x02 \x01(\tR\fsystemPrompt\x12b\n" +
	"\x10user_preferences\x18\x03 \x03(\v27.ai.orchestrator.v1.MessageContext.UserPreferencesEntryR\x0fuserPreferences\x12L\n" +
	"\bmetadata\x18\x04 \x03(\v20.ai.orchestrator.v1.MessageContext.MetadataEntryR\bmetadata\x1aB\n" +
	"\x14UserPreferencesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"x\n" +
	"\x0eHistoryMessage\x12\x12\n" +
	"\x04role\x18\x01 \x01(\tR\x04role\x12\x18\n" +
	"\acontent\x18\x02 \x01(\tR\acontent\x128\n" +
	"\ttimestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\"\xb4\x02\n" +
	"\rProcessConfig\x12\x14\n" +
	"\x05model\x18\x01 \x01(\tR\x05model\x12 \n" +
	"\vtemperature\x18\x02 \x01(\x02R\vtemperature\x12\x1d\n" +
	"\n" +
	"max_tokens\x18\x03 \x01(\x05R\tmaxTokens\x12\x13\n" +
	"\x05top_p\x18\x04 \x01(\x02R\x04topP\x12\x16\n" +
	"\x06stream\x18\x05 \x01(\bR\x06stream\x12\x1d\n" +
	"\n" +
	"enable_rag\x18\x06 \x01(\bR\tenableRag\x12<\n" +
	"\n" +
	"rag_config\x18\a \x01(\v2\x1d.ai.orchestrator.v1.RAGConfigR\tragConfig\x12B\n" +
	"\fagent_config\x18\b \x01(\v2\x1f.ai.orchestrator.v1.AgentConfigR\vagentConfig\"\xcd\x01\n" +
	"\tRAGConfig\x12,\n" +
	"\x12knowledge_base_ids\x18\x01 \x03(\tR\x10knowledgeBaseIds\x12\x13\n" +
	"\x05top_k\x18\x02 \x01(\x05R\x04topK\x121\n" +
	"\x14similarity_threshold\x18\x03 \x01(\x02R\x13similarityThreshold\x12%\n" +
	"\x0eretrieval_mode\x18\x04 \x01(\tR\rretrievalMode\x12#\n" +
	"\renable_rerank\x18\x05 \x01(\bR\fenableRerank\"\x98\x01\n" +
	"\vAgentConfig\x12#\n" +
	"\rallowed_tools\x18\x01 \x03(\tR\fallowedTools\x12%\n" +
	"\x0emax_iterations\x18\x02 \x01(\x05R\rmaxIterations\x12\x18\n" +
	"\atimeout\x18\x03 \x01(\x05R\atimeout\x12#\n" +
	"\renable_memory\x18\x04 \x01(\bR\fenableMemory\"\xcd\x03\n" +
	"\x16ProcessMessageResponse\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x14\n" +
	"\x05reply\x18\x02 \x01(\tR\x05reply\x12\x16\n" +
	"\x06engine\x18\x03 \x01(\tR\x06engine\x12:\n" +
	"\tcitations\x18\x04 \x03(\v2\x1c.ai.orchestrator.v1.CitationR\tcitations\x12;\n" +
	"\n" +
	"tool_calls\x18\x05 \x03(\v2\x1c.ai.orchestrator.v1.ToolCallR\ttoolCalls\x12T\n" +
	"\bmetadata\x18\x06 \x03(\v28.ai.orchestrator.v1.ProcessMessageResponse.MetadataEntryR\bmetadata\x12?\n" +
	"\vtoken_usage\x18\a \x01(\v2\x1e.ai.orchestrator.v1.TokenUsageR\n" +
	"tokenUsage\x12\x1f\n" +
	"\vduration_ms\x18\b \x01(\x03R\n" +
	"durationMs\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xfe\x03\n" +
	"\x1cProcessMessageStreamResponse\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12B\n" +
	"\n" +
	"event_type\x18\x02 \x01(\x0e2#.ai.orchestrator.v1.StreamEventTypeR\teventType\x12\x14\n" +
	"\x05delta\x18\x03 \x01(\tR\x05delta\x12:\n" +
	"\tcitations\x18\x04 \x03(\v2\x1c.ai.orchestrator.v1.CitationR\tcitations\x129\n" +
	"\ttool_call\x18\x05 \x01(\v2\x1c.ai.orchestrator.v1.ToolCallR\btoolCall\x12Z\n" +
	"\bmetadata\x18\x06 \x03(\v2>.ai.orchestrator.v1.ProcessMessageStreamResponse.MetadataEntryR\bmetadata\x12\x1a\n" +
	"\bfinished\x18\a \x01(\bR\bfinished\x12?\n" +
	"\vfinal_stats\x18\b \x01(\v2\x1e.ai.orchestrator.v1.FinalStatsR\n" +
	"finalStats\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x86\x02\n" +
	"\bCitation\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1f\n" +
	"\vdocument_id\x18\x02 \x01(\tR\n" +
	"documentId\x12\x14\n" +
	"\x05title\x18\x03 \x01(\tR\x05title\x12\x18\n" +
	"\asnippet\x18\x04 \x01(\tR\asnippet\x12\x14\n" +
	"\x05score\x18\x05 \x01(\x02R\x05score\x12F\n" +
	"\bmetadata\x18\x06 \x03(\v2*.ai.orchestrator.v1.Citation.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb3\x01\n" +
	"\bToolCall\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04tool\x18\x02 \x01(\tR\x04tool\x12\x1c\n" +
	"\targuments\x18\x03 \x01(\tR\targuments\x12\x16\n" +
	"\x06result\x18\x04 \x01(\tR\x06result\x12\x16\n" +
	"\x06status\x18\x05 \x01(\tR\x06status\x12\x14\n" +
	"\x05error\x18\x06 \x01(\tR\x05error\x12\x1f\n" +
	"\vduration_ms\x18\a \x01(\x03R\n" +
	"durationMs\"\x9c\x01\n" +
	"\n" +
	"TokenUsage\x12#\n" +
	"\rprompt_tokens\x18\x01 \x01(\x05R\fpromptTokens\x12+\n" +
	"\x11completion_tokens\x18\x02 \x01(\x05R\x10completionTokens\x12!\n" +
	"\ftotal_tokens\x18\x03 \x01(\x05R\vtotalTokens\x12\x19\n" +
	"\bcost_usd\x18\x04 \x01(\x02R\acostUsd\"\xb0\x01\n" +
	"\n" +
	"FinalStats\x12?\n" +
	"\vtoken_usage\x18\x01 \x01(\v2\x1e.ai.orchestrator.v1.TokenUsageR\n" +
	"tokenUsage\x12\x1f\n" +
	"\vduration_ms\x18\x02 \x01(\x03R\n" +
	"durationMs\x12\x16\n" +
	"\x06engine\x18\x03 \x01(\tR\x06engine\x12(\n" +
	"\x10tool_calls_count\x18\x04 \x01(\x05R\x0etoolCallsCount\"\xab\x02\n" +
	"\x16ExecuteWorkflowRequest\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\tR\n" +
	"workflowId\x12/\n" +
	"\x13workflow_definition\x18\x02 \x01(\tR\x12workflowDefinition\x12N\n" +
	"\x06inputs\x18\x03 \x03(\v26.ai.orchestrator.v1.ExecuteWorkflowRequest.InputsEntryR\x06inputs\x12\x17\n" +
	"\auser_id\x18\x04 \x01(\tR\x06userId\x12\x1b\n" +
	"\ttenant_id\x18\x05 \x01(\tR\btenantId\x1a9\n" +
	"\vInputsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xeb\x03\n" +
	"\x17ExecuteWorkflowResponse\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x1f\n" +
	"\vinstance_id\x18\x02 \x01(\tR\n" +
	"instanceId\x12:\n" +
	"\x06status\x18\x03 \x01(\x0e2\".ai.orchestrator.v1.WorkflowStatusR\x06status\x12R\n" +
	"\aoutputs\x18\x04 \x03(\v28.ai.orchestrator.v1.ExecuteWorkflowResponse.OutputsEntryR\aoutputs\x126\n" +
	"\x05steps\x18\x05 \x03(\v2 .ai.orchestrator.v1.WorkflowStepR\x05steps\x12U\n" +
	"\bmetadata\x18\x06 \x03(\v29.ai.orchestrator.v1.ExecuteWorkflowResponse.MetadataEntryR\bmetadata\x1a:\n" +
	"\fOutputsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc3\x03\n" +
	"\fWorkflowStep\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12:\n" +
	"\x06status\x18\x03 \x01(\x0e2\".ai.orchestrator.v1.WorkflowStatusR\x06status\x12\x16\n" +
	"\x06engine\x18\x04 \x01(\tR\x06engine\x12D\n" +
	"\x06inputs\x18\x05 \x03(\v2,.ai.orchestrator.v1.WorkflowStep.InputsEntryR\x06inputs\x12G\n" +
	"\aoutputs\x18\x06 \x03(\v2-.ai.orchestrator.v1.WorkflowStep.OutputsEntryR\aoutputs\x12\x14\n" +
	"\x05error\x18\a \x01(\tR\x05error\x12\x1f\n" +
	"\vduration_ms\x18\b \x01(\x03R\n" +
	"durationMs\x1a9\n" +
	"\vInputsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a:\n" +
	"\fOutputsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"E\n" +
	"\x11CancelTaskRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\"H\n" +
	"\x12CancelTaskResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"H\n" +
	"\x14GetTaskStatusRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\"\xaf\x03\n" +
	"\x15GetTaskStatusResponse\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x126\n" +
	"\x06status\x18\x02 \x01(\x0e2\x1e.ai.orchestrator.v1.TaskStatusR\x06status\x12\x1a\n" +
	"\bprogress\x18\x03 \x01(\x05R\bprogress\x12!\n" +
	"\fcurrent_step\x18\x04 \x01(\tR\vcurrentStep\x12S\n" +
	"\bmetadata\x18\x05 \x03(\v27.ai.orchestrator.v1.GetTaskStatusResponse.MetadataEntryR\bmetadata\x129\n" +
	"\n" +
	"created_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01*n\n" +
	"\vProcessMode\x12\r\n" +
	"\tMODE_AUTO\x10\x00\x12\f\n" +
	"\bMODE_RAG\x10\x01\x12\x0e\n" +
	"\n" +
	"MODE_AGENT\x10\x02\x12\r\n" +
	"\tMODE_CHAT\x10\x03\x12\x0e\n" +
	"\n" +
	"MODE_VOICE\x10\x04\x12\x13\n" +
	"\x0fMODE_MULTIMODAL\x10\x05*\xbd\x01\n" +
	"\x0fStreamEventType\x12\x11\n" +
	"\rEVENT_UNKNOWN\x10\x00\x12\x0f\n" +
	"\vEVENT_START\x10\x01\x12\x0f\n" +
	"\vEVENT_DELTA\x10\x02\x12\x12\n" +
	"\x0eEVENT_CITATION\x10\x03\x12\x13\n" +
	"\x0fEVENT_TOOL_CALL\x10\x04\x12\x15\n" +
	"\x11EVENT_TOOL_RESULT\x10\x05\x12\x12\n" +
	"\x0eEVENT_THINKING\x10\x06\x12\x0f\n" +
	"\vEVENT_ERROR\x10\a\x12\x10\n" +
	"\fEVENT_FINISH\x10\b*\x8b\x01\n" +
	"\x0eWorkflowStatus\x12\x12\n" +
	"\x0eSTATUS_UNKNOWN\x10\x00\x12\x12\n" +
	"\x0eSTATUS_PENDING\x10\x01\x12\x12\n" +
	"\x0eSTATUS_RUNNING\x10\x02\x12\x14\n" +
	"\x10STATUS_COMPLETED\x10\x03\x12\x11\n" +
	"\rSTATUS_FAILED\x10\x04\x12\x14\n" +
	"\x10STATUS_CANCELLED\x10\x05*{\n" +
	"\n" +
	"TaskStatus\x12\x10\n" +
	"\fTASK_UNKNOWN\x10\x00\x12\x10\n" +
	"\fTASK_PENDING\x10\x01\x12\x10\n" +
	"\fTASK_RUNNING\x10\x02\x12\x12\n" +
	"\x0eTASK_COMPLETED\x10\x03\x12\x0f\n" +
	"\vTASK_FAILED\x10\x04\x12\x12\n" +
	"\x0eTASK_CANCELLED\x10\x052\x9d\x04\n" +
	"\fOrchestrator\x12g\n" +
	"\x0eProcessMessage\x12).ai.orchestrator.v1.ProcessMessageRequest\x1a*.ai.orchestrator.v1.ProcessMessageResponse\x12u\n" +
	"\x14ProcessMessageStream\x12).ai.orchestrator.v1.ProcessMessageRequest\x1a0.ai.orchestrator.v1.ProcessMessageStreamResponse0\x01\x12j\n" +
	"\x0fExecuteWorkflow\x12*.ai.orchestrator.v1.ExecuteWorkflowRequest\x1a+.ai.orchestrator.v1.ExecuteWorkflowResponse\x12[\n" +
	"\n" +
	"CancelTask\x12%.ai.orchestrator.v1.CancelTaskRequest\x1a&.ai.orchestrator.v1.CancelTaskResponse\x12d\n" +
	"\rGetTaskStatus\x12(.ai.orchestrator.v1.GetTaskStatusRequest\x1a).ai.orchestrator.v1.GetTaskStatusResponseB-Z+voicehelper/api/proto/ai-orchestrator/v1;v1b\x06proto3"

var (
	file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescOnce sync.Once
	file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescData []byte
)

func file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescGZIP() []byte {
	file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescOnce.Do(func() {
		file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDesc), len(file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDesc)))
	})
	return file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDescData
}

var file_api_proto_ai_orchestrator_v1_orchestrator_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_api_proto_ai_orchestrator_v1_orchestrator_proto_goTypes = []any{
	(ProcessMode)(0),                     // 0: ai.orchestrator.v1.ProcessMode
	(StreamEventType)(0),                 // 1: ai.orchestrator.v1.StreamEventType
	(WorkflowStatus)(0),                  // 2: ai.orchestrator.v1.WorkflowStatus
	(TaskStatus)(0),                      // 3: ai.orchestrator.v1.TaskStatus
	(*ProcessMessageRequest)(nil),        // 4: ai.orchestrator.v1.ProcessMessageRequest
	(*MessageContext)(nil),               // 5: ai.orchestrator.v1.MessageContext
	(*HistoryMessage)(nil),               // 6: ai.orchestrator.v1.HistoryMessage
	(*ProcessConfig)(nil),                // 7: ai.orchestrator.v1.ProcessConfig
	(*RAGConfig)(nil),                    // 8: ai.orchestrator.v1.RAGConfig
	(*AgentConfig)(nil),                  // 9: ai.orchestrator.v1.AgentConfig
	(*ProcessMessageResponse)(nil),       // 10: ai.orchestrator.v1.ProcessMessageResponse
	(*ProcessMessageStreamResponse)(nil), // 11: ai.orchestrator.v1.ProcessMessageStreamResponse
	(*Citation)(nil),                     // 12: ai.orchestrator.v1.Citation
	(*ToolCall)(nil),                     // 13: ai.orchestrator.v1.ToolCall
	(*TokenUsage)(nil),                   // 14: ai.orchestrator.v1.TokenUsage
	(*FinalStats)(nil),                   // 15: ai.orchestrator.v1.FinalStats
	(*ExecuteWorkflowRequest)(nil),       // 16: ai.orchestrator.v1.ExecuteWorkflowRequest
	(*ExecuteWorkflowResponse)(nil),      // 17: ai.orchestrator.v1.ExecuteWorkflowResponse
	(*WorkflowStep)(nil),                 // 18: ai.orchestrator.v1.WorkflowStep
	(*CancelTaskRequest)(nil),            // 19: ai.orchestrator.v1.CancelTaskRequest
	(*CancelTaskResponse)(nil),           // 20: ai.orchestrator.v1.CancelTaskResponse
	(*GetTaskStatusRequest)(nil),         // 21: ai.orchestrator.v1.GetTaskStatusRequest
	(*GetTaskStatusResponse)(nil),        // 22: ai.orchestrator.v1.GetTaskStatusResponse
	nil,                                  // 23: ai.orchestrator.v1.MessageContext.UserPreferencesEntry
	nil,                                  // 24: ai.orchestrator.v1.MessageContext.MetadataEntry
	nil,                                  // 25: ai.orchestrator.v1.ProcessMessageResponse.MetadataEntry
	nil,                                  // 26: ai.orchestrator.v1.ProcessMessageStreamResponse.MetadataEntry
	nil,                                  // 27: ai.orchestrator.v1.Citation.MetadataEntry
	nil,                                  // 28: ai.orchestrator.v1.ExecuteWorkflowRequest.InputsEntry
	nil,                                  // 29: ai.orchestrator.v1.ExecuteWorkflowResponse.OutputsEntry
	nil,                                  // 30: ai.orchestrator.v1.ExecuteWorkflowResponse.MetadataEntry
	nil,                                  // 31: ai.orchestrator.v1.WorkflowStep.InputsEntry
	nil,                                  // 32: ai.orchestrator.v1.WorkflowStep.OutputsEntry
	nil,                                  // 33: ai.orchestrator.v1.GetTaskStatusResponse.MetadataEntry
	(*timestamppb.Timestamp)(nil),        // 34: google.protobuf.Timestamp
}
var file_api_proto_ai_orchestrator_v1_orchestrator_proto_depIdxs = []int32{
	5,  // 0: ai.orchestrator.v1.ProcessMessageRequest.context:type_name -> ai.orchestrator.v1.MessageContext
	0,  // 1: ai.orchestrator.v1.ProcessMessageRequest.mode:type_name -> ai.orchestrator.v1.ProcessMode
	7,  // 2: ai.orchestrator.v1.ProcessMessageRequest.config:type_name -> ai.orchestrator.v1.ProcessConfig
	6,  // 3: ai.orchestrator.v1.MessageContext.history:type_name -> ai.orchestrator.v1.HistoryMessage
	23, // 4: ai.orchestrator.v1.MessageContext.user_preferences:type_name -> ai.orchestrator.v1.MessageContext.UserPreferencesEntry
	24, // 5: ai.orchestrator.v1.MessageContext.metadata:type_name -> ai.orchestrator.v1.MessageContext.MetadataEntry
	34, // 6: ai.orchestrator.v1.HistoryMessage.timestamp:type_name -> google.protobuf.Timestamp
	8,  // 7: ai.orchestrator.v1.ProcessConfig.rag_config:type_name -> ai.orchestrator.v1.RAGConfig
	9,  // 8: ai.orchestrator.v1.ProcessConfig.agent_config:type_name -> ai.orchestrator.v1.AgentConfig
	12, // 9: ai.orchestrator.v1.ProcessMessageResponse.citations:type_name -> ai.orchestrator.v1.Citation
	13, // 10: ai.orchestrator.v1.ProcessMessageResponse.tool_calls:type_name -> ai.orchestrator.v1.ToolCall
	25, // 11: ai.orchestrator.v1.ProcessMessageResponse.metadata:type_name -> ai.orchestrator.v1.ProcessMessageResponse.MetadataEntry
	14, // 12: ai.orchestrator.v1.ProcessMessageResponse.token_usage:type_name -> ai.orchestrator.v1.TokenUsage
	1,  // 13: ai.orchestrator.v1.ProcessMessageStreamResponse.event_type:type_name -> ai.orchestrator.v1.StreamEventType
	12, // 14: ai.orchestrator.v1.ProcessMessageStreamResponse.citations:type_name -> ai.orchestrator.v1.Citation
	13, // 15: ai.orchestrator.v1.ProcessMessageStreamResponse.tool_call:type_name -> ai.orchestrator.v1.ToolCall
	26, // 16: ai.orchestrator.v1.ProcessMessageStreamResponse.metadata:type_name -> ai.orchestrator.v1.ProcessMessageStreamResponse.MetadataEntry
	15, // 17: ai.orchestrator.v1.ProcessMessageStreamResponse.final_stats:type_name -> ai.orchestrator.v1.FinalStats
	27, // 18: ai.orchestrator.v1.Citation.metadata:type_name -> ai.orchestrator.v1.Citation.MetadataEntry
	14, // 19: ai.orchestrator.v1.FinalStats.token_usage:type_name -> ai.orchestrator.v1.TokenUsage
	28, // 20: ai.orchestrator.v1.ExecuteWorkflowRequest.inputs:type_name -> ai.orchestrator.v1.ExecuteWorkflowRequest.InputsEntry
	2,  // 21: ai.orchestrator.v1.ExecuteWorkflowResponse.status:type_name -> ai.orchestrator.v1.WorkflowStatus
	29, // 22: ai.orchestrator.v1.ExecuteWorkflowResponse.outputs:type_name -> ai.orchestrator.v1.ExecuteWorkflowResponse.OutputsEntry
	18, // 23: ai.orchestrator.v1.ExecuteWorkflowResponse.steps:type_name -> ai.orchestrator.v1.WorkflowStep
	30, // 24: ai.orchestrator.v1.ExecuteWorkflowResponse.metadata:type_name -> ai.orchestrator.v1.ExecuteWorkflowResponse.MetadataEntry
	2,  // 25: ai.orchestrator.v1.WorkflowStep.status:type_name -> ai.orchestrator.v1.WorkflowStatus
	31, // 26: ai.orchestrator.v1.WorkflowStep.inputs:type_name -> ai.orchestrator.v1.WorkflowStep.InputsEntry
	32, // 27: ai.orchestrator.v1.WorkflowStep.outputs:type_name -> ai.orchestrator.v1.WorkflowStep.OutputsEntry
	3,  // 28: ai.orchestrator.v1.GetTaskStatusResponse.status:type_name -> ai.orchestrator.v1.TaskStatus
	33, // 29: ai.orchestrator.v1.GetTaskStatusResponse.metadata:type_name -> ai.orchestrator.v1.GetTaskStatusResponse.MetadataEntry
	34, // 30: ai.orchestrator.v1.GetTaskStatusResponse.created_at:type_name -> google.protobuf.Timestamp
	34, // 31: ai.orchestrator.v1.GetTaskStatusResponse.updated_at:type_name -> google.protobuf.Timestamp
	4,  // 32: ai.orchestrator.v1.Orchestrator.ProcessMessage:input_type -> ai.orchestrator.v1.ProcessMessageRequest
	4,  // 33: ai.orchestrator.v1.Orchestrator.ProcessMessageStream:input_type -> ai.orchestrator.v1.ProcessMessageRequest
	16, // 34: ai.orchestrator.v1.Orchestrator.ExecuteWorkflow:input_type -> ai.orchestrator.v1.ExecuteWorkflowRequest
	19, // 35: ai.orchestrator.v1.Orchestrator.CancelTask:input_type -> ai.orchestrator.v1.CancelTaskRequest
	21, // 36: ai.orchestrator.v1.Orchestrator.GetTaskStatus:input_type -> ai.orchestrator.v1.GetTaskStatusRequest
	10, // 37: ai.orchestrator.v1.Orchestrator.ProcessMessage:output_type -> ai.orchestrator.v1.ProcessMessageResponse
	11, // 38: ai.orchestrator.v1.Orchestrator.ProcessMessageStream:output_type -> ai.orchestrator.v1.ProcessMessageStreamResponse
	17, // 39: ai.orchestrator.v1.Orchestrator.ExecuteWorkflow:output_type -> ai.orchestrator.v1.ExecuteWorkflowResponse
	20, // 40: ai.orchestrator.v1.Orchestrator.CancelTask:output_type -> ai.orchestrator.v1.CancelTaskResponse
	22, // 41: ai.orchestrator.v1.Orchestrator.GetTaskStatus:output_type -> ai.orchestrator.v1.GetTaskStatusResponse
	37, // [37:42] is the sub-list for method output_type
	32, // [32:37] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_api_proto_ai_orchestrator_v1_orchestrator_proto_init() }
func file_api_proto_ai_orchestrator_v1_orchestrator_proto_init() {
	if File_api_proto_ai_orchestrator_v1_orchestrator_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDesc), len(file_api_proto_ai_orchestrator_v1_orchestrator_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_ai_orchestrator_v1_orchestrator_proto_goTypes,
		DependencyIndexes: file_api_proto_ai_orchestrator_v1_orchestrator_proto_depIdxs,
		EnumInfos:         file_api_proto_ai_orchestrator_v1_orchestrator_proto_enumTypes,
		MessageInfos:      file_api_proto_ai_orchestrator_v1_orchestrator_proto_msgTypes,
	}.Build()
	File_api_proto_ai_orchestrator_v1_orchestrator_proto = out.File
	file_api_proto_ai_orchestrator_v1_orchestrator_proto_goTypes = nil
	file_api_proto_ai_orchestrator_v1_orchestrator_proto_depIdxs = nil
}
