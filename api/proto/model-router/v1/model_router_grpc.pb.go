// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: api/proto/model-router/v1/model_router.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ModelRouter_RouteModel_FullMethodName        = "/model_router.v1.ModelRouter/RouteModel"
	ModelRouter_GetModelCost_FullMethodName      = "/model_router.v1.ModelRouter/GetModelCost"
	ModelRouter_BatchRoute_FullMethodName        = "/model_router.v1.ModelRouter/BatchRoute"
	ModelRouter_RecommendModel_FullMethodName    = "/model_router.v1.ModelRouter/RecommendModel"
	ModelRouter_UpdateModelConfig_FullMethodName = "/model_router.v1.ModelRouter/UpdateModelConfig"
)

// ModelRouterClient is the client API for ModelRouter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ModelRouter Service - 模型路由与成本优化
type ModelRouterClient interface {
	// 路由模型请求
	RouteModel(ctx context.Context, in *RouteModelRequest, opts ...grpc.CallOption) (*RouteModelResponse, error)
	// 获取模型成本
	GetModelCost(ctx context.Context, in *GetModelCostRequest, opts ...grpc.CallOption) (*ModelCost, error)
	// 批量路由
	BatchRoute(ctx context.Context, in *BatchRouteRequest, opts ...grpc.CallOption) (*BatchRouteResponse, error)
	// 获取推荐模型
	RecommendModel(ctx context.Context, in *RecommendModelRequest, opts ...grpc.CallOption) (*RecommendModelResponse, error)
	// 更新模型配置
	UpdateModelConfig(ctx context.Context, in *UpdateModelConfigRequest, opts ...grpc.CallOption) (*ModelConfig, error)
}

type modelRouterClient struct {
	cc grpc.ClientConnInterface
}

func NewModelRouterClient(cc grpc.ClientConnInterface) ModelRouterClient {
	return &modelRouterClient{cc}
}

func (c *modelRouterClient) RouteModel(ctx context.Context, in *RouteModelRequest, opts ...grpc.CallOption) (*RouteModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RouteModelResponse)
	err := c.cc.Invoke(ctx, ModelRouter_RouteModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelRouterClient) GetModelCost(ctx context.Context, in *GetModelCostRequest, opts ...grpc.CallOption) (*ModelCost, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModelCost)
	err := c.cc.Invoke(ctx, ModelRouter_GetModelCost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelRouterClient) BatchRoute(ctx context.Context, in *BatchRouteRequest, opts ...grpc.CallOption) (*BatchRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchRouteResponse)
	err := c.cc.Invoke(ctx, ModelRouter_BatchRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelRouterClient) RecommendModel(ctx context.Context, in *RecommendModelRequest, opts ...grpc.CallOption) (*RecommendModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecommendModelResponse)
	err := c.cc.Invoke(ctx, ModelRouter_RecommendModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelRouterClient) UpdateModelConfig(ctx context.Context, in *UpdateModelConfigRequest, opts ...grpc.CallOption) (*ModelConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModelConfig)
	err := c.cc.Invoke(ctx, ModelRouter_UpdateModelConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelRouterServer is the server API for ModelRouter service.
// All implementations must embed UnimplementedModelRouterServer
// for forward compatibility.
//
// ModelRouter Service - 模型路由与成本优化
type ModelRouterServer interface {
	// 路由模型请求
	RouteModel(context.Context, *RouteModelRequest) (*RouteModelResponse, error)
	// 获取模型成本
	GetModelCost(context.Context, *GetModelCostRequest) (*ModelCost, error)
	// 批量路由
	BatchRoute(context.Context, *BatchRouteRequest) (*BatchRouteResponse, error)
	// 获取推荐模型
	RecommendModel(context.Context, *RecommendModelRequest) (*RecommendModelResponse, error)
	// 更新模型配置
	UpdateModelConfig(context.Context, *UpdateModelConfigRequest) (*ModelConfig, error)
	mustEmbedUnimplementedModelRouterServer()
}

// UnimplementedModelRouterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedModelRouterServer struct{}

func (UnimplementedModelRouterServer) RouteModel(context.Context, *RouteModelRequest) (*RouteModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RouteModel not implemented")
}
func (UnimplementedModelRouterServer) GetModelCost(context.Context, *GetModelCostRequest) (*ModelCost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelCost not implemented")
}
func (UnimplementedModelRouterServer) BatchRoute(context.Context, *BatchRouteRequest) (*BatchRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchRoute not implemented")
}
func (UnimplementedModelRouterServer) RecommendModel(context.Context, *RecommendModelRequest) (*RecommendModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendModel not implemented")
}
func (UnimplementedModelRouterServer) UpdateModelConfig(context.Context, *UpdateModelConfigRequest) (*ModelConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModelConfig not implemented")
}
func (UnimplementedModelRouterServer) mustEmbedUnimplementedModelRouterServer() {}
func (UnimplementedModelRouterServer) testEmbeddedByValue()                     {}

// UnsafeModelRouterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelRouterServer will
// result in compilation errors.
type UnsafeModelRouterServer interface {
	mustEmbedUnimplementedModelRouterServer()
}

func RegisterModelRouterServer(s grpc.ServiceRegistrar, srv ModelRouterServer) {
	// If the following call pancis, it indicates UnimplementedModelRouterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ModelRouter_ServiceDesc, srv)
}

func _ModelRouter_RouteModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelRouterServer).RouteModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelRouter_RouteModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelRouterServer).RouteModel(ctx, req.(*RouteModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelRouter_GetModelCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelCostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelRouterServer).GetModelCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelRouter_GetModelCost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelRouterServer).GetModelCost(ctx, req.(*GetModelCostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelRouter_BatchRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelRouterServer).BatchRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelRouter_BatchRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelRouterServer).BatchRoute(ctx, req.(*BatchRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelRouter_RecommendModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelRouterServer).RecommendModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelRouter_RecommendModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelRouterServer).RecommendModel(ctx, req.(*RecommendModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelRouter_UpdateModelConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModelConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelRouterServer).UpdateModelConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelRouter_UpdateModelConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelRouterServer).UpdateModelConfig(ctx, req.(*UpdateModelConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModelRouter_ServiceDesc is the grpc.ServiceDesc for ModelRouter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelRouter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "model_router.v1.ModelRouter",
	HandlerType: (*ModelRouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RouteModel",
			Handler:    _ModelRouter_RouteModel_Handler,
		},
		{
			MethodName: "GetModelCost",
			Handler:    _ModelRouter_GetModelCost_Handler,
		},
		{
			MethodName: "BatchRoute",
			Handler:    _ModelRouter_BatchRoute_Handler,
		},
		{
			MethodName: "RecommendModel",
			Handler:    _ModelRouter_RecommendModel_Handler,
		},
		{
			MethodName: "UpdateModelConfig",
			Handler:    _ModelRouter_UpdateModelConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/model-router/v1/model_router.proto",
}
