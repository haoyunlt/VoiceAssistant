syntax = "proto3";

package notification.v1;

option go_package = "voicehelper/api/proto/notification/v1;notificationv1";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

// NotificationService 通知服务
service NotificationService {
  // 发送通知
  rpc SendNotification(SendNotificationRequest) returns (SendNotificationResponse);

  // 批量发送
  rpc SendBatch(SendBatchRequest) returns (SendBatchResponse);

  // 获取通知状态
  rpc GetNotificationStatus(GetNotificationStatusRequest) returns (NotificationStatus);

  // 获取用户通知列表
  rpc ListUserNotifications(ListUserNotificationsRequest) returns (ListUserNotificationsResponse);

  // 标记为已读
  rpc MarkAsRead(MarkAsReadRequest) returns (google.protobuf.Empty);

  // 创建模板
  rpc CreateTemplate(CreateTemplateRequest) returns (Template);

  // 获取模板
  rpc GetTemplate(GetTemplateRequest) returns (Template);

  // 更新模板
  rpc UpdateTemplate(UpdateTemplateRequest) returns (Template);

  // 删除模板
  rpc DeleteTemplate(DeleteTemplateRequest) returns (google.protobuf.Empty);

  // 健康检查
  rpc HealthCheck(google.protobuf.Empty) returns (HealthResponse);
}

// ============ 通知发送 ============

message SendNotificationRequest {
  string tenant_id = 1;
  string user_id = 2;
  NotificationType type = 3;
  string subject = 4;
  string content = 5;
  NotificationChannel channel = 6;
  map<string, string> metadata = 7;
  string template_id = 8; // 可选，使用模板
  map<string, string> template_vars = 9; // 模板变量
  NotificationPriority priority = 10;
  google.protobuf.Timestamp schedule_at = 11; // 定时发送
}

enum NotificationType {
  NOTIFICATION_TYPE_UNSPECIFIED = 0;
  NOTIFICATION_TYPE_INFO = 1;
  NOTIFICATION_TYPE_WARNING = 2;
  NOTIFICATION_TYPE_ERROR = 3;
  NOTIFICATION_TYPE_SUCCESS = 4;
  NOTIFICATION_TYPE_ALERT = 5;
}

enum NotificationChannel {
  CHANNEL_UNSPECIFIED = 0;
  CHANNEL_EMAIL = 1;
  CHANNEL_SMS = 2;
  CHANNEL_INAPP = 3;
  CHANNEL_WEBHOOK = 4;
  CHANNEL_WEBSOCKET = 5;
  CHANNEL_PUSH = 6;
}

enum NotificationPriority {
  PRIORITY_UNSPECIFIED = 0;
  PRIORITY_LOW = 1;
  PRIORITY_NORMAL = 2;
  PRIORITY_HIGH = 3;
  PRIORITY_URGENT = 4;
}

message SendNotificationResponse {
  string notification_id = 1;
  NotificationStatus status = 2;
  google.protobuf.Timestamp created_at = 3;
}

message SendBatchRequest {
  repeated SendNotificationRequest notifications = 1;
}

message SendBatchResponse {
  repeated SendNotificationResponse results = 1;
  int32 success_count = 2;
  int32 failure_count = 3;
  repeated string error_messages = 4;
}

// ============ 通知状态 ============

message GetNotificationStatusRequest {
  string notification_id = 1;
}

message NotificationStatus {
  string notification_id = 1;
  DeliveryStatus status = 2;
  string error_message = 3;
  google.protobuf.Timestamp sent_at = 4;
  google.protobuf.Timestamp delivered_at = 5;
  google.protobuf.Timestamp read_at = 6;
  int32 retry_count = 7;
  google.protobuf.Timestamp next_retry_at = 8;
}

enum DeliveryStatus {
  STATUS_UNSPECIFIED = 0;
  STATUS_PENDING = 1;
  STATUS_SENT = 2;
  STATUS_DELIVERED = 3;
  STATUS_FAILED = 4;
  STATUS_READ = 5;
  STATUS_EXPIRED = 6;
  STATUS_CANCELLED = 7;
}

// ============ 用户通知列表 ============

message ListUserNotificationsRequest {
  string user_id = 1;
  string tenant_id = 2;
  bool unread_only = 3;
  repeated NotificationType types = 4;
  int32 page = 5;
  int32 page_size = 6;
  google.protobuf.Timestamp start_time = 7;
  google.protobuf.Timestamp end_time = 8;
}

message ListUserNotificationsResponse {
  repeated Notification notifications = 1;
  int32 total = 2;
  int32 unread_count = 3;
  int32 page = 4;
  int32 page_size = 5;
}

message Notification {
  string id = 1;
  string user_id = 2;
  string tenant_id = 3;
  NotificationType type = 4;
  NotificationPriority priority = 5;
  string subject = 6;
  string content = 7;
  bool read = 8;
  NotificationChannel channel = 9;
  map<string, string> metadata = 10;
  google.protobuf.Timestamp created_at = 11;
  google.protobuf.Timestamp read_at = 12;
  google.protobuf.Timestamp expires_at = 13;
}

message MarkAsReadRequest {
  string user_id = 1;
  repeated string notification_ids = 2;
  bool mark_all = 3; // 标记所有为已读
}

// ============ 模板管理 ============

message CreateTemplateRequest {
  string tenant_id = 1;
  string name = 2;
  string description = 3;
  NotificationChannel channel = 4;
  string subject_template = 5;
  string content_template = 6;
  map<string, string> default_vars = 7;
  repeated string required_vars = 8;
}

message GetTemplateRequest {
  string template_id = 1;
  string tenant_id = 2;
}

message UpdateTemplateRequest {
  string template_id = 1;
  string tenant_id = 2;
  string name = 3;
  string description = 4;
  string subject_template = 5;
  string content_template = 6;
  map<string, string> default_vars = 7;
  repeated string required_vars = 8;
}

message DeleteTemplateRequest {
  string template_id = 1;
  string tenant_id = 2;
}

message Template {
  string id = 1;
  string tenant_id = 2;
  string name = 3;
  string description = 4;
  NotificationChannel channel = 5;
  string subject_template = 6;
  string content_template = 7;
  map<string, string> default_vars = 8;
  repeated string required_vars = 9;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
  string status = 12; // active, inactive
  int32 usage_count = 13;
}

// ============ 健康检查 ============

message HealthResponse {
  string status = 1; // healthy, degraded, unhealthy
  map<string, string> checks = 2;
  google.protobuf.Timestamp timestamp = 3;
}
