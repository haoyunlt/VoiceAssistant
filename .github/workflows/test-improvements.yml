name: Test Code Improvements

on:
  push:
    branches: [main, develop]
    paths:
      - "algo/**"
      - "pkg/**"
      - "cmd/**"
      - ".github/workflows/test-improvements.yml"
  pull_request:
    branches: [main, develop]

jobs:
  test-python-services:
    name: Test Python Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
        service:
          - agent-engine
          - retrieval-service
          - model-adapter
          - rag-engine

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f algo/${{ matrix.service }}/requirements.txt ]; then
            pip install -r algo/${{ matrix.service }}/requirements.txt
          fi

      - name: Run tests
        run: |
          cd algo/${{ matrix.service }}
          if [ -d tests ]; then
            PYTHONPATH="../../:$PYTHONPATH" pytest tests/ -v --tb=short --maxfail=5
          else
            echo "No tests found for ${{ matrix.service }}"
          fi

      - name: Generate coverage report
        if: matrix.python-version == '3.11'
        run: |
          cd algo/${{ matrix.service }}
          if [ -d tests ]; then
            PYTHONPATH="../../:$PYTHONPATH" pytest tests/ --cov=app --cov-report=xml --cov-report=term
          fi

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          files: ./algo/${{ matrix.service }}/coverage.xml
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage

  test-common-modules:
    name: Test Common Modules
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov
          pip install pydantic pydantic-settings httpx

      - name: Run common tests
        run: |
          cd algo/common
          if [ -d tests ]; then
            PYTHONPATH="../..:$PYTHONPATH" pytest tests/ -v --tb=short --cov=. --cov-report=xml --cov-report=term
          fi

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./algo/common/coverage.xml
          flags: common
          name: common-coverage

  test-go-packages:
    name: Test Go Packages
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test ./pkg/... -v -race -coverprofile=coverage.out

      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.out
          flags: go
          name: go-coverage

  lint-python:
    name: Lint Python Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install linters
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort mypy

      - name: Run ruff
        run: ruff check algo/

      - name: Run black
        run: black --check algo/

      - name: Run isort
        run: isort --check-only algo/

      - name: Run mypy (optional, may fail)
        continue-on-error: true
        run: mypy algo/ --ignore-missing-imports

  lint-go:
    name: Lint Go Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Run safety check (Python)
        run: |
          pip install safety
          find algo -name requirements.txt -exec safety check -r {} \; || true

      - name: Run bandit (Python security)
        run: |
          pip install bandit
          bandit -r algo/ -ll || true

      - name: Run gosec (Go security)
        uses: securego/gosec@master
        with:
          args: ./...

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-python-services, test-go-packages]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Run integration tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: test
          DB_PASSWORD: test
          DB_DATABASE: testdb
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          # 运行集成测试（如果存在）
          if [ -d tests/integration ]; then
            pip install pytest pytest-asyncio
            pytest tests/integration/ -v
          else
            echo "No integration tests found"
          fi

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs:
      [
        test-python-services,
        test-common-modules,
        test-go-packages,
        lint-python,
        lint-go,
      ]
    if: always()

    steps:
      - name: Check results
        run: |
          echo "✅ All tests and checks completed"
          echo "Check individual job results for details"
